%define api.prefix {das_yy}
%code requires {
	#include "daScript/misc/platform.h"
	#include "daScript/ast/ast.h"
    #include "daScript/ast/ast_generate.h"
    
    namespace das {
        extern ProgramPtr			g_Program;
        extern FileAccessPtr        g_Access;
        extern vector<FileInfo *>	g_FileAccessStack;
    }
    using namespace das;
    
    struct VariableDeclaration {
        VariableDeclaration ( const LineInfo & a, vector<string> * n, TypeDecl * t, Expression * i )
            : at(a), pNameList(n), pTypeDecl(t), pInit(i) {}
        virtual ~VariableDeclaration () { delete pNameList; delete pTypeDecl; delete pInit; }
        LineInfo        at;
        vector<string>  *pNameList;
        TypeDecl        *pTypeDecl;
        Expression      *pInit;
        bool            move_to_init = false;
        bool            override = false;
    };
    
    ExprLooksLikeCall * parseFunctionArguments ( ExprLooksLikeCall * pCall, Expression * arguments );
    vector<ExpressionPtr> sequenceToList ( Expression * arguments );
    void deleteVariableDeclarationList ( vector<VariableDeclaration *> * list );
    void varDeclToTypeDecl ( TypeDecl * pType, vector<VariableDeclaration*> * list );
    
    LineInfo tokAt ( const struct YYLTYPE & li );
    
    Annotation * findAnnotation ( const string & name, const LineInfo & at );
}

%{
	#include "daScript/misc/platform.h"
	#include "daScript/simulate/debug_info.h"
	#include "daScript/ast/compilation_errors.h"

	#ifdef _MSC_VER
	#pragma warning(disable:4262)
	#pragma warning(disable:4127)
	#pragma warning(disable:4702)
	#endif
    
    using namespace das;
    
    void das_yyerror (const string & error, das::CompilationError cerr = das::CompilationError::syntax_error);
    void das_yyerror (const string & error, const das::LineInfo & at, das::CompilationError cerr = das::CompilationError::unspecified);
    int yylex();
    void yybegin(const char * str);
%}

%locations
%verbose
%debug

%union {
    char                            ch;
    bool                            b;
    int32_t                         i;
    uint32_t                        ui;
    int64_t                         i64;
    uint64_t                        ui64;
    double                          d;
	double                          fd;
    string *                        s;
    vector<string> *                pNameList;
    VariableDeclaration *           pVarDecl;
    vector<VariableDeclaration*> *  pVarDeclList;
    TypeDecl *                      pTypeDecl;
    Expression *                    pExpression;
    Type                            type;
    AnnotationArgument *            aa;
    AnnotationArgumentList *        aaList;
    AnnotationDeclaration *         fa;
    AnnotationList *                faList;
    MakeStruct *                    pMakeStruct;
    Enumeration *                   pEnum;
    Structure *                     pStructure;
}

%destructor { delete $$; } <s>
%destructor { delete $$; } <pNameList>
%destructor { delete $$; } <pVarDecl>
%destructor { deleteVariableDeclarationList($$); } <pVarDeclList>
%destructor { delete $$; } <pTypeDecl>
%destructor { delete $$; } <pExpression>
%destructor { delete $$; } <aa>
%destructor { delete $$; } <aaList>
%destructor { delete $$; } <fa>
%destructor { delete $$; } <faList>
%destructor { delete $$; } <pMakeStruct>
%destructor { delete $$; } <pEnum>

%token  LEXER_ERROR

/* keywords */
%token  _STRUCT     _LET        _DEF        _WHILE
%token  _IF         _ELSE       _FOR        _CATCH
%token  _TRUE       _FALSE      _SIZEOF     _NEWT
%token  _TYPE       _IN         _ELIF       _ARRAY
%token  _RETURN     _NULL       _BREAK      _TRY
%token  _OPTIONS    _TABLE      _EXPECT     _CONST
%token  _REQUIRE    _OPERATOR   _ENUM       _FINALLY
%token  _DELETE     _DEREF      _SCOPE      _TYPEDEF
%token  _WITH       _CAST       _OVERRIDE   _UPCAST

/* basic types */
%token  _TBOOL       _TVOID       _TSTRING     _TAUTO
%token  _TINT        _TINT2       _TINT3       _TINT4
%token  _TUINT       _TUINT2      _TUINT3      _TUINT4
%token  _TFLOAT      _TFLOAT2     _TFLOAT3     _TFLOAT4
%token  _TRANGE      _TURANGE     _TBLOCK      _TINT64
%token  _TUINT64     _TYPENAME	  _TDOUBLE	   _TFUNCTION
%token  _TLAMBDA

/* operators */
%token  ADDEQU      SUBEQU      DIVEQU      MULEQU      MODEQU
%token  ANDEQU      OREQU       XOREQU
%token  ADDADD      SUBSUB      LEEQU
%token  GREQU       EQUEQU      NOTEQU      RARROW      LARROW
%token  QQ          QDOT        LPIPE       LBPIPE      RPIPE

%token<i>       INTEGER
%token<i64>     LONG_INTEGER
%token<ui>      UNSIGNED_INTEGER
%token<ui64>    UNSIGNED_LONG_INTEGER
%token<fd>      FLOAT
%token<d>       DOUBLE
%token<s>       NAME

%token      BEGIN_STRING
%token<ch>  STRING_CHARACTER
%token      END_STRING
%token		BEGIN_STRING_EXPR
%token		END_STRING_EXPR

%type <pNameList>       variable_name_list
%type <type>            basic_type_declaration
%type <pTypeDecl>       type_declaration
%type <pTypeDecl>       auto_type_declaration
%type <pTypeDecl>       optional_function_type
%type <pTypeDecl>       structure_type_declaration
%type <pVarDeclList>    variable_declaration_list
%type <pVarDeclList>    struct_variable_declaration_list
%type <pVarDeclList>    optional_function_argument_list
%type <pVarDeclList>    function_argument_list
%type <pVarDecl>        variable_declaration
%type <pVarDecl>        structure_variable_declaration
%type <pVarDecl>        let_variable_declaration
%type <s>               name_in_namespace
%type <s>               annotation_declaration_name
%type <s>               function_name
%type <s>               optional_structure_parent
%type <aa>              annotation_argument
%type <aaList>          annotation_argument_list
%type <fa>              annotation_declaration
%type <faList>          annotation_list
%type <faList>          optional_annotation_list
%type <pStructure>      structure_name

%type <b>               copy_or_move
%type <b>               let_scope
%type <b>               optional_override

%type <pEnum>           enum_list

%type <pExpression>     expr
%type <pExpression>     expr_assign
%type <pExpression>     expr_list
%type <pExpression>     expression_let
%type <pExpression>     expressions
%type <pExpression>     expression_block
%type <pExpression>     expression_with
%type <pExpression>     expression_while_loop
%type <pExpression>     expression_for_loop
%type <pExpression>     expression_break
%type <pExpression>     expression_delete
%type <pExpression>     expression_return
%type <pExpression>     expression_else
%type <pExpression>     expression_if_then_else
%type <pExpression>     expression_try_catch
%type <pExpression>     expr_new
%type <pExpression>     expr_pipe
%type <pExpression>     expr_sizeof
%type <pExpression>     expr_cast
%type <pExpression>     expr_typename
%type <pExpression>     expr_block
%type <pExpression>     expression_any
%type <pExpression>     expr_numeric_const
%type <pExpression>     string_builder_body
%type <pExpression>     string_builder
%type <pExpression>     make_decl
%type <pMakeStruct>     make_struct_fields
%type <pExpression>     make_struct_decl
%type <pExpression>     make_struct_dim
%type <pExpression>     make_dim
%type <pExpression>     make_dim_decl
%type <pExpression>     expr_method_call

%type <s>               character_sequence
%type <s>               string_constant

/* operation precedence*/
%left       ','
%right      '=' ADDEQU SUBEQU DIVEQU MULEQU MODEQU ANDEQU OREQU XOREQU LARROW
%right      '?' ':'
%left       '|'
%left       '^'
%left       '&'
%left       EQUEQU NOTEQU
%left       '<' '>' LEEQU GREQU
%left       '-' '+'
%left       '*' '/' '%'
%left       QQ
%right      '@' UNARY_MINUS UNARY_PLUS '~' '!' PRE_INC PRE_DEC ADDADD SUBSUB
%left       LPIPE RPIPE LBPIPE
%left       POST_INC POST_DEC '.' '[' ']' '(' ')' RARROW QDOT
%nonassoc   COLCOL

%%

program
    :
    |   program structure_declaration
    |   program enum_declaration
    |   program global_let
    |   program function_declaration
    |   program expect_declaration
    |   program require_declaration
	|	program options_declaration
    |   program alias_declaration
    ;

character_sequence
    :                                                       { $$ = new string(); }
    |   character_sequence[elem]  STRING_CHARACTER[char]    { $$ = $elem; *$elem += $char; }
    ;

string_constant
    :   BEGIN_STRING character_sequence[seq] END_STRING    { $$ = $seq; }
    ;

string_builder_body
    :   {
        $$ = new ExprStringBuilder();
    }
    |   string_builder_body[sb] character_sequence[sconst] {
        auto sc = make_shared<ExprConstString>(tokAt(@sconst),*$sconst);
        delete $sconst;
        static_cast<ExprStringBuilder *>($sb)->elements.push_back(sc);
        $$ = $sb;
    }
    |   string_builder_body[sb] BEGIN_STRING_EXPR expr[subexpr] END_STRING_EXPR {
        auto se = ExpressionPtr($subexpr);
        static_cast<ExprStringBuilder *>($sb)->elements.push_back(se);
        $$ = $sb;
    }
    ;

string_builder
    :   BEGIN_STRING string_builder_body[sb] END_STRING {
        auto strb = static_cast<ExprStringBuilder *>($sb);
        if ( strb->elements.size()==0 ) {
            $$ = new ExprConstString(strb->at,"");
            delete $sb;
        } else if ( strb->elements.size()==1 && strb->elements[0]->rtti_isStringConstant() ) {
            auto sconst = static_pointer_cast<ExprConstString>(strb->elements[0]);
            $$ = new ExprConstString(strb->at,sconst->text);
            delete $sb;
        } else {
            $$ = $sb;
        }
    }
    ;

options_declaration
	:	_OPTIONS	annotation_argument_list[list] {
		if ( g_Program->options.arguments.size() ) {
			g_Program->options.arguments.insert ( g_Program->options.arguments.begin(),
                $list->arguments.begin(), $list->arguments.end() );
		} else {
			swap ( g_Program->options, *$list );
		}
		auto opt = g_Program->options.find("indenting", tInt);
		extern int das_tab_size, das_def_tab_size;
		if (opt)
		{
			if (opt->iValue != 0 && opt->iValue != 2 && opt->iValue != 4 && opt->iValue != 8)//this is error
				das_tab_size = das_def_tab_size;
			else
				das_tab_size = opt->iValue ? opt->iValue : das_def_tab_size;//0 is default
		}
		delete $list;
	}
	;

require_declaration
    :   _REQUIRE require_list
    ;

require_list
    :   require_module
    |   require_list ',' require_module
    ;

require_module
    :   NAME[name] {
        if ( !g_Program->addModule(*$name) ) {
            das_yyerror("required module not found " + *$name,tokAt(@name),
                CompilationError::module_not_found);
        }
        delete $name;
    }
    ;

expect_declaration
    :   _EXPECT expect_list
    ;

expect_list
    :   expect_error
    |   expect_list ',' expect_error
    ;

expect_error
    : INTEGER[err] {
        g_Program->expectErrors[CompilationError($err)] ++;
    }
    | INTEGER[err] ':' INTEGER[count] {
        g_Program->expectErrors[CompilationError($err)] += $count;
    }
    ;

expression_else
    :                                                   { $$ = nullptr; }
    |   _ELSE expression_block[block]                   { $$ = $block; }
    |   _ELIF[loc] expr[cond] expression_block[block] expression_else[then] {
        $$ = new ExprIfThenElse(tokAt(@loc),ExpressionPtr($cond),
            ExpressionPtr($block),ExpressionPtr($then));
    }
    ;

expression_if_then_else
    :   _IF[loc] expr[cond] expression_block[block] expression_else[then] {
        $$ = new ExprIfThenElse(tokAt(@loc),ExpressionPtr($cond),
            ExpressionPtr($block),ExpressionPtr($then));
    }
    ;

expression_for_loop
    :   _FOR[loc] variable_name_list[iters] _IN expr_list[srcs] expression_block[block] {
        auto pFor = new ExprFor(tokAt(@loc));
        pFor->iterators = *$iters;
        delete $iters;
        pFor->sources = sequenceToList($srcs);
        pFor->subexpr = ExpressionPtr($block);
        ((ExprBlock *)$block)->inTheLoop = true;
        $$ = pFor;
    }
    ;

expression_while_loop
    :   _WHILE[loc] expr[condition] expression_block[block] {
        auto pWhile = new ExprWhile(tokAt(@loc));
        pWhile->cond = ExpressionPtr($condition);
        pWhile->body = ExpressionPtr($block);
        ((ExprBlock *)$block)->inTheLoop = true;
        $$ = pWhile;
    }
    ;

expression_with
    :   _WITH[loc] expr[with] expression_block[block] {
        auto pWith = new ExprWith(tokAt(@loc));
        pWith->with = ExpressionPtr($with);
        pWith->body = ExpressionPtr($block);
        $$ = pWith;
    }
    ;

annotation_argument
    :   NAME[name] '=' string_constant[value]   { $$ = new AnnotationArgument(*$name,*$value); delete $value; delete $name; }
    |   NAME[name] '=' NAME[value]              { $$ = new AnnotationArgument(*$name,*$value); delete $value; delete $name; }
    |   NAME[name] '=' INTEGER[value]           { $$ = new AnnotationArgument(*$name,$value); delete $name; }
    |   NAME[name] '=' FLOAT[value]             { $$ = new AnnotationArgument(*$name,float($value)); delete $name; }
    |   NAME[name] '=' _TRUE                    { $$ = new AnnotationArgument(*$name,true); delete $name; }
    |   NAME[name] '=' _FALSE                   { $$ = new AnnotationArgument(*$name,false); delete $name; }
    ;

annotation_argument_list
    :   annotation_argument[arg]  {
        $$ = new AnnotationArgumentList();
        $$->arguments.push_back(*$arg);
        delete $arg;
    }
    |   annotation_argument_list[argL] ',' annotation_argument[arg] {
            $$ = $argL;
            $$->arguments.push_back(*$arg);
            delete $arg;
    }
    ;

annotation_declaration_name
    :   name_in_namespace[name]     { $$ = $name; }
    |   _REQUIRE                    { $$ = new string("require"); }
    ;

annotation_declaration
    :   annotation_declaration_name[name] {
        $$ = new AnnotationDeclaration();
        if ( auto ann = findAnnotation(*$name,tokAt(@name)) ) {
            $$->annotation = ann->shared_from_this();
        }
        delete $name;
    }
    |   annotation_declaration_name[name] '(' annotation_argument_list[argL] ')' {
        $$ = new AnnotationDeclaration();
        if ( auto ann = findAnnotation(*$name,tokAt(@name)) ) {
            $$->annotation = ann->shared_from_this();
        }
        swap ( $$->arguments, *$argL );
        delete $argL;
        delete $name;
    }
    ;

annotation_list
    :   annotation_declaration[ann] {
            $$ = new AnnotationList();
            $$->push_back(AnnotationDeclarationPtr($ann));
    }
    |   annotation_list[annL] ',' annotation_declaration[ann] {
        $$ = $annL;
        $$->push_back(AnnotationDeclarationPtr($ann));
    }
    ;

optional_annotation_list
    :                                   { $$ = nullptr; }
    |   '[' annotation_list[annL] ']'   { $$ = $annL; }
    ;

optional_function_argument_list
    :                                           { $$ = nullptr; }
    |   '(' ')'                                 { $$ = nullptr; }
    |   '(' function_argument_list[list] ')'    { $$ = $list; }
    ;

optional_function_type
    :   {
        $$ = new TypeDecl(Type::autoinfer);
        $$->at = LineInfo(g_FileAccessStack.back(), yylloc.first_column,yylloc.first_line);
    }
    |   ':' type_declaration[typeDecl]  {
        $$ = $typeDecl;
        $$->at = tokAt(@typeDecl);
    }
    ;

function_name
    :   NAME[name]        { $$ = $name; }
    |   _OPERATOR '!'     { $$ = new string("!"); }
    |   _OPERATOR '~'     { $$ = new string("~"); }
    |   _OPERATOR ADDEQU  { $$ = new string("+="); }
    |   _OPERATOR SUBEQU  { $$ = new string("-="); }
    |   _OPERATOR MULEQU  { $$ = new string("*="); }
    |   _OPERATOR DIVEQU  { $$ = new string("/="); }
    |   _OPERATOR MODEQU  { $$ = new string("%="); }
    |   _OPERATOR ANDEQU  { $$ = new string("&="); }
    |   _OPERATOR OREQU   { $$ = new string("|="); }
    |   _OPERATOR XOREQU  { $$ = new string("^="); }
    |   _OPERATOR '+'     { $$ = new string("+"); }
    |   _OPERATOR '-'     { $$ = new string("-"); }
    |   _OPERATOR '*'     { $$ = new string("*"); }
    |   _OPERATOR '/'     { $$ = new string("/"); }
    |   _OPERATOR '%'     { $$ = new string("%"); }
    |   _OPERATOR '<'     { $$ = new string("<"); }
    |   _OPERATOR '>'     { $$ = new string(">"); }
    |   _OPERATOR EQUEQU  { $$ = new string("=="); }
    |   _OPERATOR NOTEQU  { $$ = new string("!="); }
    |   _OPERATOR LEEQU   { $$ = new string("<="); }
    |   _OPERATOR GREQU   { $$ = new string(">="); }
    |   _OPERATOR '&'     { $$ = new string("&"); }
    |   _OPERATOR '|'     { $$ = new string("|"); }
    |   _OPERATOR '^'     { $$ = new string("^"); }
    |   ADDADD _OPERATOR  { $$ = new string("++"); }
    |   SUBSUB _OPERATOR  { $$ = new string("--"); }
    |   _OPERATOR ADDADD  { $$ = new string("+++"); }
    |   _OPERATOR SUBSUB  { $$ = new string("---"); }
    ;

function_declaration
    :   optional_annotation_list[annL] _DEF[loc] function_name[name]
            optional_function_argument_list[list] optional_function_type[result] expression_block[block] {
        auto pFunction = make_shared<Function>();
        pFunction->at = tokAt(@loc);
        pFunction->name = *$name;
        pFunction->body = ExpressionPtr($block);
        pFunction->result = TypeDeclPtr($result);
        if ( $list ) {
            for ( auto pDecl : *$list ) {
                if ( pDecl->pTypeDecl ) {
                    for ( const auto & name : *pDecl->pNameList ) {
                        if ( !pFunction->findArgument(name) ) {
                            VariablePtr pVar = make_shared<Variable>();
                            pVar->name = name;
                            pVar->at = pDecl->at;
                            pVar->type = make_shared<TypeDecl>(*pDecl->pTypeDecl);
                            if ( pDecl->pInit ) {
                                pVar->init = ExpressionPtr(pDecl->pInit->clone());
                                pVar->move_to_init = pDecl->move_to_init;
                            }
                            pFunction->arguments.push_back(pVar);
                        } else {
                            das_yyerror("function argument is already declared " + name,pDecl->at,
                                CompilationError::argument_already_declared);
                        }
                    }
                }
            }
            deleteVariableDeclarationList($list);
        }
        if ( $annL ) {
            for ( auto pA : *$annL ) {
                if ( pA->annotation ) {
                    if ( pA->annotation->rtti_isFunctionAnnotation() ) {
                        auto ann = static_pointer_cast<FunctionAnnotation>(pA->annotation);
                        string err;
                        if ( !ann->apply(pFunction, *g_Program->thisModuleGroup, pA->arguments, err) ) {
                            das_yyerror("can't apply annotation\n" + err,
                                tokAt(@loc), CompilationError::invalid_annotation);
                        }
                    } else {
                        das_yyerror("functions are only allowed function annotations",
                            tokAt(@loc), CompilationError::invalid_annotation);
                    }
                }
            }
            swap ( pFunction->annotations, *$annL );
            delete $annL;
        }
        if ( pFunction->isGeneric() ) {
            if ( !g_Program->addGeneric(pFunction) ) {
                das_yyerror("generic function is already defined " +
                    pFunction->getMangledName(),tokAt(@loc),
                        CompilationError::function_already_declared);
                pFunction.reset();
            }
        } else {
            if ( !g_Program->addFunction(pFunction) ) {
                das_yyerror("function is already defined " +
                    pFunction->getMangledName(),tokAt(@loc),
                        CompilationError::function_already_declared);
                pFunction.reset();
            }
        }
        delete $name;
    }
    ;

expression_block
    :   '{' expressions[block] '}' {
        $$ = $block;
    }
    |   '{' expressions[block] '}' _FINALLY '{' expressions[final] '}' {
        auto pB = (ExprBlock *) $block;
        auto pF = (ExprBlock *) $final;
        swap ( pB->finalList, pF->list );
        $$ = $block;
        delete $final;
    }
    ;

expression_any
    :   ';'                                 { $$ = nullptr; }
    |   expr_pipe[subexpr]                  { $$ = $subexpr; }
    |   expr_assign[subexpr] ';'            { $$ = $subexpr; }
    |   expression_delete[subexpr] ';'      { $$ = $subexpr; }
    |   expression_let[subexpr]             { $$ = $subexpr; }
    |   expression_while_loop[subexpr]      { $$ = $subexpr; }
    |   expression_with[subexpr]            { $$ = $subexpr; }
    |   expression_for_loop[subexpr]        { $$ = $subexpr; }
    |   expression_break[subexpr] ';'       { $$ = $subexpr; }
    |   expression_return[subexpr] ';'      { $$ = $subexpr; }
    |   expression_if_then_else[subexpr]    { $$ = $subexpr; }
    |   expression_try_catch[subexpr]       { $$ = $subexpr; }
    ;

expressions
    :   [loc]                                           {
        $$ = new ExprBlock();
        $$->at = tokAt(@loc);
    }
    |   expressions[block] expression_any[subexpr]      {
        $$ = $block;
        if ( $subexpr ) {
            static_cast<ExprBlock*>($block)->list.push_back(ExpressionPtr($subexpr));
        }
    }
    |   expressions[block] error {
        delete $block; $$ = nullptr; YYABORT;
    }
    ;

expr_pipe
    :   expr_assign[fncall] LBPIPE[loc] expr_block[arg] {
        Expression * pipeCall = $fncall->tail();
        if ( pipeCall->rtti_isCall() ) {
            auto pCall = (ExprLooksLikeCall *) pipeCall;
            pCall->arguments.push_back(ExpressionPtr($arg));
            $$ = $fncall;
        } else {
            das_yyerror("can only pipe into function call",tokAt(@loc),CompilationError::cant_pipe);
            $$ = $fncall;
        }
    }
    ;

name_in_namespace
    :   NAME[name]                             { $$ = $name; }
    |   NAME[namespace] COLCOL NAME[name]      {
            *$namespace += "::";
            *$namespace += *$name;
            delete $name;
            $$ = $namespace;
        }
    |   COLCOL NAME[name]                      { *$name = "::" + *$name; $$ = $name; }
    ;

expression_delete
    :   _DELETE[loc] expr[subexpr] {
        $$ = new ExprDelete(tokAt(@loc), ExpressionPtr($subexpr));
    }
    ;

expr_new
    :   _NEWT[loc] type_declaration[typeDecl]   {
        $$ = new ExprNew(tokAt(@loc),TypeDeclPtr($typeDecl),false);
    }
    |   _NEWT[loc] type_declaration[typeDecl] '(' ')'   {
        $$ = new ExprNew(tokAt(@loc),TypeDeclPtr($typeDecl),true);
    }
    |   _NEWT[loc] type_declaration[typeDecl] '(' expr_list[arguments] ')'   {
        auto pNew = new ExprNew(tokAt(@loc),TypeDeclPtr($typeDecl),true);
        $$ = parseFunctionArguments(pNew,$arguments);
    }
    |   _NEWT[loc] make_decl[md] {
        $$ = new ExprAscend(tokAt(@loc),ExpressionPtr($md));
    }
    ;

expression_break
    :   _BREAK[loc] { $$ = new ExprBreak(tokAt(@loc)); }
    ;

expression_return
    :   _RETURN[loc] {
        $$ = new ExprReturn(tokAt(@loc),nullptr);
    }
    |   _RETURN[loc] expr[subexpr] {
        $$ = new ExprReturn(tokAt(@loc),ExpressionPtr($subexpr));
    }
    |   _RETURN[loc] LARROW expr[subexpr] {
        auto pRet = new ExprReturn(tokAt(@loc),ExpressionPtr($subexpr));
        pRet->moveSemantics = true;
        $$ = pRet;
    }
    ;

expression_try_catch
    :   _TRY[loc] expression_block[tryBlock] _CATCH expression_block[catchBlock] {
        $$ = new ExprTryCatch(tokAt(@loc),ExpressionPtr($tryBlock),ExpressionPtr($catchBlock));
    }
    ;

let_scope
    :               { $$ = false; }
    |   _IN _SCOPE  { $$ = true; }
    ;

expression_let
    :   _LET '(' variable_declaration_list[list] ')' expression_block[subexpr] {
        auto pLet = new ExprLet();
        pLet->subexpr = ExpressionPtr($subexpr);
        for ( auto pDecl : *$list ) {
            if ( pDecl->pTypeDecl ) {
                for ( const auto & name : *pDecl->pNameList ) {
                    if ( !pLet->find(name) ) {
                        VariablePtr pVar = make_shared<Variable>();
                        pVar->name = name;
                        pVar->at = pDecl->at;
                        pVar->type = make_shared<TypeDecl>(*pDecl->pTypeDecl);
                        if ( pDecl->pInit ) {
                            pVar->init = pDecl->pInit->clone();
                            pVar->move_to_init = pDecl->move_to_init;
                        }
                        pLet->variables.push_back(pVar);
                    } else {
                        das_yyerror("local variable is already declared " + name,tokAt(@list),
                            CompilationError::local_variable_already_declared);
                    }
                }
            }
        }
        deleteVariableDeclarationList($list);
        $$ = pLet;
    }
    |   _LET[loc] let_scope[inScope] let_variable_declaration[decl] {
        auto pLet = new ExprLet();
        pLet->scoped = false;
        pLet->inScope = $inScope;
        if ( $decl->pTypeDecl ) {
            for ( const auto & name : *$decl->pNameList ) {
                if ( !pLet->find(name) ) {
                    VariablePtr pVar = make_shared<Variable>();
                    pVar->name = name;
                    pVar->at = $decl->at;
                    pVar->type = make_shared<TypeDecl>(*$decl->pTypeDecl);
                    if ( $decl->pInit ) {
                        pVar->init = $decl->pInit->clone();
                        pVar->move_to_init = $decl->move_to_init;
                    }
                    pLet->variables.push_back(pVar);
                } else {
                    das_yyerror("local variable is already declared " + name,tokAt(@loc),
                        CompilationError::local_variable_already_declared);
                }
            }
        }
        delete $decl;
        $$ = pLet;
    }
    ;

expr_cast
    :   _CAST[loc] '<' type_declaration[decl] '>' expr[subexpr] {
        $$ = new ExprCast(tokAt(@loc),ExpressionPtr($subexpr),TypeDeclPtr($decl));
    }
    |   _UPCAST[loc] '<' type_declaration[decl] '>' expr[subexpr] {
        $$ = new ExprCast(tokAt(@loc),ExpressionPtr($subexpr),TypeDeclPtr($decl), true);
    }
    ;

expr_sizeof
    :   _SIZEOF[loc] '(' expr[subexpr] ')' {
            $$ = new ExprSizeOf(tokAt(@loc),ExpressionPtr($subexpr));
    }
    |   _SIZEOF[loc] '(' _TYPE type_declaration[decl] ')' {
            $$ = new ExprSizeOf(tokAt(@loc),TypeDeclPtr($decl));
    }
    ;

expr_typename
    :   _TYPENAME[loc] '(' expr[subexpr] ')' {
        $$ = new ExprTypeName(tokAt(@loc),ExpressionPtr($subexpr));
    }
    |   _TYPENAME[loc] '(' _TYPE type_declaration[decl] ')' {
        $$ = new ExprTypeName(tokAt(@loc),TypeDeclPtr($decl));
    }
    ;

expr_list
    :   expr[subexpr] {
        $$ = $subexpr;
    }
    |   expr_list[left] ',' expr[right]     {
            $$ = new ExprSequence(tokAt(@left),ExpressionPtr($left),ExpressionPtr($right));
    }
    ;

expr_block
    :   expression_block[block]             {
        ExprBlock * closure = (ExprBlock *) $block;
        $$ = new ExprMakeBlock(tokAt(@block),ExpressionPtr($block));
        closure->returnType = make_shared<TypeDecl>(Type::autoinfer);
    }
    |   '$' optional_annotation_list[annL] optional_function_argument_list[list]
                                optional_function_type[result] expression_block[block] {
        $$ = new ExprMakeBlock(tokAt(@block),ExpressionPtr($block));
        ExprBlock * closure = (ExprBlock *) $block;
        closure->returnType = TypeDeclPtr($result);
        if ( $list ) {
            for ( auto pDecl : *$list ) {
                if ( pDecl->pTypeDecl ) {
                    for ( const auto & name : *pDecl->pNameList ) {
                        if ( !closure->findArgument(name) ) {
                            VariablePtr pVar = make_shared<Variable>();
                            pVar->name = name;
                            pVar->at = pDecl->at;
                            pVar->type = make_shared<TypeDecl>(*pDecl->pTypeDecl);
                            if ( pDecl->pInit ) {
                                pVar->init = ExpressionPtr(pDecl->pInit->clone());
                                pVar->move_to_init = pDecl->move_to_init;
                            }
                            closure->arguments.push_back(pVar);
                        } else {
                            das_yyerror("block argument is already declared " + name,
                                pDecl->at,CompilationError::argument_already_declared);
                        }
                    }
                }
            }
            deleteVariableDeclarationList($list);
        }
        if ( $annL ) {
            for ( auto pA : *$annL ) {
                if ( pA->annotation ) {
                    if ( pA->annotation->rtti_isFunctionAnnotation() ) {
                        auto ann = static_pointer_cast<FunctionAnnotation>(pA->annotation);
                        string err;
                        if ( !ann->apply(closure, *g_Program->thisModuleGroup, pA->arguments, err) ) {
                            das_yyerror("can't apply annotation\n" + err, tokAt(@annL),
                                CompilationError::invalid_annotation);
                        }
                    } else {
                        das_yyerror("blocks are only allowed function annotations", tokAt(@annL),
                            CompilationError::invalid_annotation);
                    }
                }
            }
            swap ( closure->annotations, *$annL );
            delete $annL;
        }
    }
    ;

expr_numeric_const
    :   INTEGER[const]                        { $$ = new ExprConstInt(tokAt(@const),(int32_t)$const); }
    |   UNSIGNED_INTEGER[const]               { $$ = new ExprConstUInt(tokAt(@const),(uint32_t)$const); }
    |   LONG_INTEGER[const]                   { $$ = new ExprConstInt64(tokAt(@const),(int64_t)$const); }
    |   UNSIGNED_LONG_INTEGER[const]          { $$ = new ExprConstUInt64(tokAt(@const),(uint64_t)$const); }
    |   FLOAT[const]                          { $$ = new ExprConstFloat(tokAt(@const),(float)$const); }
	|   DOUBLE[const]                         { $$ = new ExprConstDouble(tokAt(@const),(double)$const); }
    ;

expr_assign
    :   expr[ex]                             { $$ = $ex; }
    |   expr[left] '='[loc]    expr[right]   { $$ = new ExprCopy(tokAt(@loc),ExpressionPtr($left),ExpressionPtr($right)); }
    |   expr[left] ANDEQU[loc] expr[right]   { $$ = new ExprOp2(tokAt(@loc),"&=", ExpressionPtr($left), ExpressionPtr($right)); }
    |   expr[left] OREQU[loc] expr[right]    { $$ = new ExprOp2(tokAt(@loc),"|=", ExpressionPtr($left), ExpressionPtr($right)); }
    |   expr[left] XOREQU[loc] expr[right]   { $$ = new ExprOp2(tokAt(@loc),"^=", ExpressionPtr($left), ExpressionPtr($right)); }
    |   expr[left] ADDEQU[loc] expr[right]   { $$ = new ExprOp2(tokAt(@loc),"+=", ExpressionPtr($left), ExpressionPtr($right)); }
    |   expr[left] SUBEQU[loc] expr[right]   { $$ = new ExprOp2(tokAt(@loc),"-=", ExpressionPtr($left), ExpressionPtr($right)); }
    |   expr[left] MULEQU[loc] expr[right]   { $$ = new ExprOp2(tokAt(@loc),"*=", ExpressionPtr($left), ExpressionPtr($right)); }
    |   expr[left] DIVEQU[loc] expr[right]   { $$ = new ExprOp2(tokAt(@loc),"/=", ExpressionPtr($left), ExpressionPtr($right)); }
    |   expr[left] MODEQU[loc] expr[right]   { $$ = new ExprOp2(tokAt(@loc),"%=", ExpressionPtr($left), ExpressionPtr($right)); }
    ;

/* a->b(args) is short for invoke(a.b, a, args)  */
expr_method_call
    :   expr[left] RARROW[loc] NAME[method_name] '(' ')' {
        auto pInvoke = makeInvokeMethod(tokAt(@loc), $left, *$method_name);
        delete $method_name;
        $$ = pInvoke;
    }
    |   expr[left] RARROW[loc] NAME[method_name] '(' expr_list[arguments] ')' {
        auto pInvoke = makeInvokeMethod(tokAt(@loc), $left, *$method_name);
        auto callArgs = sequenceToList($arguments);
        pInvoke->arguments.insert ( pInvoke->arguments.end(), callArgs.begin(), callArgs.end() );
        delete $method_name;
        $$ = pInvoke;
    }
    ;

expr
    :   _NULL[loc]                            { $$ = new ExprConstPtr(tokAt(@loc),nullptr); }
    |   NAME[name]                            { $$ = new ExprVar(tokAt(@name),*$name); delete $name; }
    |   expr_numeric_const[nc]                { $$ = $nc; }
    |   string_builder[sb]                    { $$ = $sb; }
    |   make_decl[md]                         { $$ = $md; }
    |   _TRUE[loc]                            { $$ = new ExprConstBool(tokAt(@loc),true); }
    |   _FALSE[loc]                           { $$ = new ExprConstBool(tokAt(@loc),false); }
    |   '!'[loc] expr[subexpr]                { $$ = new ExprOp1(tokAt(@loc),"!",ExpressionPtr($subexpr)); }
    |   '~'[loc] expr[subexpr]                { $$ = new ExprOp1(tokAt(@loc),"~",ExpressionPtr($subexpr)); }
    |   '+'[loc] expr[subexpr] %prec  UNARY_PLUS  { $$ = new ExprOp1(tokAt(@loc),"+",ExpressionPtr($subexpr)); }
    |   '-'[loc] expr[subexpr] %prec  UNARY_MINUS { $$ = new ExprOp1(tokAt(@loc),"-",ExpressionPtr($subexpr)); }
    |   expr[left] LARROW[loc] expr[right]   { $$ = new ExprMove(tokAt(@loc),ExpressionPtr($left), ExpressionPtr($right)); }
    |   expr[left] '+'[loc]    expr[right]   { $$ = new ExprOp2(tokAt(@loc),"+", ExpressionPtr($left), ExpressionPtr($right)); }
    |   expr[left] '-'[loc]    expr[right]   { $$ = new ExprOp2(tokAt(@loc),"-", ExpressionPtr($left), ExpressionPtr($right)); }
    |   expr[left] '*'[loc]    expr[right]   { $$ = new ExprOp2(tokAt(@loc),"*", ExpressionPtr($left), ExpressionPtr($right)); }
    |   expr[left] '/'[loc]    expr[right]   { $$ = new ExprOp2(tokAt(@loc),"/", ExpressionPtr($left), ExpressionPtr($right)); }
    |   expr[left] '%'[loc]    expr[right]   { $$ = new ExprOp2(tokAt(@loc),"%", ExpressionPtr($left), ExpressionPtr($right)); }
    |   expr[left] '<'[loc]    expr[right]   { $$ = new ExprOp2(tokAt(@loc),"<", ExpressionPtr($left), ExpressionPtr($right)); }
    |   expr[left] '>'[loc]    expr[right]   { $$ = new ExprOp2(tokAt(@loc),">", ExpressionPtr($left), ExpressionPtr($right)); }
    |   expr[left] EQUEQU[loc] expr[right]   { $$ = new ExprOp2(tokAt(@loc),"==", ExpressionPtr($left), ExpressionPtr($right)); }
    |   expr[left] NOTEQU[loc] expr[right]   { $$ = new ExprOp2(tokAt(@loc),"!=", ExpressionPtr($left), ExpressionPtr($right)); }
    |   expr[left] LEEQU[loc]  expr[right]   { $$ = new ExprOp2(tokAt(@loc),"<=", ExpressionPtr($left), ExpressionPtr($right)); }
    |   expr[left] GREQU[loc]  expr[right]   { $$ = new ExprOp2(tokAt(@loc),">=", ExpressionPtr($left), ExpressionPtr($right)); }
    |   expr[left] '&'[loc] expr[right]      { $$ = new ExprOp2(tokAt(@loc),"&", ExpressionPtr($left), ExpressionPtr($right)); }
    |   expr[left] '|'[loc] expr[right]      { $$ = new ExprOp2(tokAt(@loc),"|", ExpressionPtr($left), ExpressionPtr($right)); }
    |   expr[left] '^'[loc] expr[right]      { $$ = new ExprOp2(tokAt(@loc),"^", ExpressionPtr($left), ExpressionPtr($right)); }
    |   ADDADD[loc] expr[subexpr] %prec PRE_INC  { $$ = new ExprOp1(tokAt(@loc),"++", ExpressionPtr($subexpr)); }
    |   SUBSUB[loc] expr[subexpr] %prec PRE_DEC  { $$ = new ExprOp1(tokAt(@loc),"--", ExpressionPtr($subexpr)); }
    |   expr[subexpr] ADDADD[loc] %prec POST_INC { $$ = new ExprOp1(tokAt(@loc),"+++", ExpressionPtr($subexpr)); }
    |   expr[subexpr] SUBSUB[loc] %prec POST_DEC { $$ = new ExprOp1(tokAt(@loc),"---", ExpressionPtr($subexpr)); }
    |   '(' expr[subexpr] ')'                    { $$ = $subexpr; }
    |   expr[subexpr] '['[loc] expr[index] ']'   { $$ = new ExprAt(tokAt(@loc), ExpressionPtr($subexpr), ExpressionPtr($index)); }
    |   expr[subexpr] '.'[loc] NAME[name]        { $$ = new ExprField(tokAt(@loc), ExpressionPtr($subexpr), *$name); delete $name; }
    |   expr[subexpr] QDOT[loc] NAME[name]       { $$ = new ExprSafeField(tokAt(@loc), ExpressionPtr($subexpr), *$name); delete $name; }
    |   '@'[loc] name_in_namespace[name]         { $$ = new ExprAddr(tokAt(@loc),*$name); delete $name; }
    |   name_in_namespace[name] '(' ')' {
            $$ = g_Program->makeCall(tokAt(@name),*$name);
            delete $name;
        }
    |   name_in_namespace[name] '(' expr_list[arguments] ')' {
            $$ = parseFunctionArguments(g_Program->makeCall(tokAt(@name),*$name),$arguments);
            delete $name;
        }
    |   basic_type_declaration[type] '(' ')' {
        $$ = g_Program->makeCall(tokAt(@type),das_to_string($type));
    }
    |   basic_type_declaration[type] '(' expr_list[arguments] ')' {
            $$ = parseFunctionArguments(g_Program->makeCall(tokAt(@type),das_to_string($type)),$arguments);
        }
    |   _DEREF[loc] '(' expr[subexpr] ')'       { $$ = new ExprPtr2Ref(tokAt(@loc),ExpressionPtr($subexpr)); }
    |   _TLAMBDA[loc] '(' ')'                   { $$ = new ExprMakeLambda(tokAt(@loc)); }
    |   _TLAMBDA[loc] '(' expr[subexpr] ')'     { $$ = new ExprMakeLambda(tokAt(@loc), ExpressionPtr($subexpr)); }
    |   expr[subexpr] QQ[loc] expr[dval]        { $$ = new ExprNullCoalescing(tokAt(@loc),ExpressionPtr($subexpr),ExpressionPtr($dval)); }
    |   expr[subexpr] '?'[loc] expr[left] ':' expr[right] {
            $$ = new ExprOp3(tokAt(@loc),"?",ExpressionPtr($subexpr),ExpressionPtr($left),ExpressionPtr($right));
        }
    |   expr_sizeof[subexpr]                    { $$ = $subexpr; }
    |   expr_cast[subexpr]                      { $$ = $subexpr; }
    |   expr_typename[subexpr]                  { $$ = $subexpr; }
    |   expr_new[subexpr]                       { $$ = $subexpr; }
    |   expr_method_call[subexpr]               { $$ = $subexpr; }
    |   expr_block[subexpr]                     { $$ = $subexpr; }
    |   expr[fncall] LPIPE[loc] expr[arg] {
        if ( $fncall->rtti_isCall() ) {
            auto pCall = (ExprLooksLikeCall *) $fncall;
            pCall->arguments.push_back(ExpressionPtr($arg));
            $$ = $fncall;
        } else {
            das_yyerror("can only pipe into a function call",tokAt(@loc),CompilationError::cant_pipe);
            $$ = $fncall;
        }
    }
    |   expr[arg] RPIPE[loc] expr[fncall] {
        if ( $fncall->rtti_isCall() ) {
            auto pCall = (ExprLooksLikeCall *) $fncall;
            pCall->arguments.insert(pCall->arguments.begin(),ExpressionPtr($arg));
            $$ = $fncall;
        } else {
            das_yyerror("can only pipe into a function call",tokAt(@loc),CompilationError::cant_pipe);
            $$ = $fncall;
        }
    }
    | name_in_namespace[ena] NAME[eni] {
		ExprConstEnumeration * resEnum = nullptr;
        auto enums = g_Program->findEnum(*$ena);
        if ( enums.size()!=1 ) {
            if ( enums.size() ) {
                string candidates = g_Program->describeCandidates(enums);
                das_yyerror("enumeraiton not found " + *$ena + "\n" + candidates, tokAt(@ena),
                    CompilationError::enumeration_not_found);
            } else {
                das_yyerror("enumeraiton not found " + *$ena, tokAt(@ena),
                    CompilationError::enumeration_not_found);
            }
        } else {
            auto pEnum = enums.back();
            auto ff = pEnum->find(*$eni);
            if ( ff.second ) {
				auto td = make_shared<TypeDecl>(pEnum);
                resEnum = new ExprConstEnumeration(tokAt(@eni), ff.first, td);
            } else {
                das_yyerror("enumeraiton value not found " + *$ena + " " + *$eni, tokAt(@eni),
                    CompilationError::enumeration_not_found);
            }
        }
		if ( resEnum ) {
			$$ = resEnum;
		} else {
			$$ = new ExprConstInt(0);	// dummy
		}
        delete $ena;
        delete $eni;
    }
    ;

optional_override
    :               { $$ = false; }
    |   _OVERRIDE   { $$ = true; }
    ;

structure_variable_declaration
    :   optional_override[ovr] variable_declaration[decl] {
        $decl->override = $ovr;
        $$ = $decl;
    }
    ;

struct_variable_declaration_list
    :   {
        $$ = new vector<VariableDeclaration*>();
    }
    |   struct_variable_declaration_list[list] structure_variable_declaration[decl] ';' {
        $$ = $list;
        $list->push_back($decl);
    }
    ;

variable_declaration_list
    :   variable_declaration[decl]                                      { $$ = new vector<VariableDeclaration*>(); $$->push_back($decl); }
    |   variable_declaration_list[list] ';' variable_declaration[decl]  { $$ = $list; $list->push_back($decl); }
    ;

function_argument_list
    :   variable_declaration[decl]                                      { $$ = new vector<VariableDeclaration*>(); $$->push_back($decl); }
    |   function_argument_list[list] ';' variable_declaration[decl]     { $$ = $list; $list->push_back($decl); }
    ;

copy_or_move
    :   '='         { $$ = false; }
    |   LARROW      { $$ = true; }
    ;

variable_declaration        /* this one can have uninitialized variable which has no type */
    :   variable_name_list[list] {
        auto autoT = new TypeDecl(Type::autoinfer);
        $$ = new VariableDeclaration(tokAt(@list),$list,autoT,nullptr);
    }
    |   variable_name_list[list] ':' type_declaration[typeDecl]  {
        $$ = new VariableDeclaration(tokAt(@list),$list,$typeDecl,nullptr);
    }
    |   variable_name_list[list] ':' type_declaration[typeDecl] copy_or_move[com] expr[init] {
        $$ = new VariableDeclaration(tokAt(@list),$list,$typeDecl,$init);
        $$->move_to_init = $com;
    }
    |   variable_name_list[list] copy_or_move[com] expr[init] {
        auto typeDecl = new TypeDecl(Type::autoinfer);
        $$ = new VariableDeclaration(tokAt(@list),$list,typeDecl,$init);
        $$->move_to_init = $com;
    }
    |   variable_name_list[list] copy_or_move[com] expr_pipe[init] {
        auto typeDecl = new TypeDecl(Type::autoinfer);
        $$ = new VariableDeclaration(tokAt(@list),$list,typeDecl,$init);
        $$->move_to_init = $com;
    }
    ;

let_variable_declaration    /* let x; is prohibited. this one can't have uninitialized variable which has no type */
    :   variable_name_list[list] ':' type_declaration[typeDecl] ';' {
        $$ = new VariableDeclaration(tokAt(@list),$list,$typeDecl,nullptr);
    }
    |   variable_name_list[list] ':' type_declaration[typeDecl] copy_or_move[com] expr[init] ';' {
        $$ = new VariableDeclaration(tokAt(@list),$list,$typeDecl,$init);
        $$->move_to_init = $com;
    }
    |   variable_name_list[list] ':' type_declaration[typeDecl] copy_or_move[com] expr_pipe[init] {
        $$ = new VariableDeclaration(tokAt(@list),$list,$typeDecl,$init);
        $$->move_to_init = $com;
    }
    |   variable_name_list[list] copy_or_move[com] expr[init] ';' {
        auto typeDecl = new TypeDecl(Type::autoinfer);
        $$ = new VariableDeclaration(tokAt(@list),$list,typeDecl,$init);
        $$->move_to_init = $com;
    }
    |   variable_name_list[list] copy_or_move[com] expr_pipe[init] {
        auto typeDecl = new TypeDecl(Type::autoinfer);
        $$ = new VariableDeclaration(tokAt(@list),$list,typeDecl,$init);
        $$->move_to_init = $com;
    }
    ;

global_let
    :   _LET '{' struct_variable_declaration_list[list] '}' {
        for ( auto pDecl : *$list ) {
            if ( pDecl->pTypeDecl ) {
                for ( const auto & name : *pDecl->pNameList ) {
                    VariablePtr pVar = make_shared<Variable>();
                    pVar->name = name;
                    pVar->at = pDecl->at;
                    pVar->type = make_shared<TypeDecl>(*pDecl->pTypeDecl);
                    if ( pDecl->pInit ) {
                        pVar->init = pDecl->pInit->clone();
                        pVar->move_to_init = pDecl->move_to_init;
                    }
                    if ( !g_Program->addVariable(pVar) )
                        das_yyerror("global variable is already declared " + name,pDecl->at,
                            CompilationError::global_variable_already_declared);
                }
            }
        }
        deleteVariableDeclarationList($list);
    }
    ;

enum_list
    :   {
        $$ = new Enumeration();
    }
    |   enum_list[pE] NAME[name] ';' {
        if ( !$pE->add(*$name) ) {
            das_yyerror("enumeration alread declared " + *$name, tokAt(@name),
                CompilationError::enumeration_value_already_declared);
        }
        delete $name;
        $$ = $pE;
    }
    |   enum_list[pE] NAME[name] '=' INTEGER[value] ';' {
        if ( !$pE->add(*$name,$value) ) {
            das_yyerror("enumeration value alread declared " + *$name, tokAt(@name),
                CompilationError::enumeration_value_already_declared);
        }
        delete $name;
        $$ = $pE;
    }
    ;

alias_declaration
    :   _TYPEDEF[loc] NAME[name] '=' type_declaration[tdecl] {
        $tdecl->alias = *$name;
        if ( !g_Program->addAlias(TypeDeclPtr($tdecl)) ) {
            das_yyerror("type alias is already defined "+*$name,tokAt(@loc),
                CompilationError::type_alias_already_declared);
        }
        delete $name;
    }
    ;

enum_declaration
    :   _ENUM[loc] NAME[name] '{' enum_list[pE] '}' {
        auto pEnum = EnumerationPtr($pE);
        pEnum->at = tokAt(@loc);
        pEnum->name = *$name; 
        if ( !g_Program->addEnumeration(pEnum) ) {
            das_yyerror("enumeration is already defined "+*$name,tokAt(@pE),
                CompilationError::enumeration_already_declared);
        }
		delete $name;
    }
    ;

optional_structure_parent
    :                                   { $$ = nullptr; }
    |   ':' name_in_namespace[name]     { $$ = $name; }
    ;

structure_name
    : NAME[name] optional_structure_parent[parent] {
        StructurePtr pStruct;
        if ( $parent ) {
            auto structs = g_Program->findStructure(*$parent);
            if ( structs.size()==1 ) {
                pStruct = structs.back()->clone();
                pStruct->name = *$name;
                pStruct->parent = structs.back().get();
            } else if ( structs.size()==0 ) {
                das_yyerror("parent structure not found"+*$parent,tokAt(@parent),
                    CompilationError::structure_not_found);
            } else {
                string candidates = g_Program->describeCandidates(structs);
                das_yyerror("too many options for "+*$parent + "\n" + candidates,tokAt(@parent),
                    CompilationError::structure_not_found);

            }
            delete $parent;
        } else {
            pStruct = make_shared<Structure>(*$name);
        }
        if ( pStruct ) {
            if ( !g_Program->addStructure(pStruct) ) {
                das_yyerror("structure is already defined "+*$name,tokAt(@name),
                    CompilationError::structure_already_declared);
                $$ = nullptr;
            } else {
                $$ = pStruct.get();
            }
        } else {
            $$ = nullptr;
        }
        delete $name;
    }
    ;

structure_declaration
    : optional_annotation_list[annL] _STRUCT[loc] structure_name[ps] '{' struct_variable_declaration_list[list] '}' {
        if ( $ps ) {
            auto pStruct = $ps->shared_from_this();
            pStruct->at = tokAt(@loc);
            for ( auto pDecl : *$list ) {
                for ( const auto & name : *pDecl->pNameList ) {
                    auto oldFd = (Structure::FieldDeclaration *) pStruct->findField(name);
                    if ( !oldFd ) {
                        if ( pDecl->override ) {
                            das_yyerror("structure field is not overriding anything, "+name,pDecl->at,
                                CompilationError::invalid_override);
                        } else {
                            auto td = make_shared<TypeDecl>(*pDecl->pTypeDecl);
                            auto init = pDecl->pInit ? ExpressionPtr(pDecl->pInit->clone()) : nullptr;
                            pStruct->fields.emplace_back(name, td, init, pDecl->move_to_init, pDecl->at);
                        }
                    } else {
                        if ( pDecl->override ) {
                                auto init = pDecl->pInit ? ExpressionPtr(pDecl->pInit->clone()) : nullptr;
                                oldFd->init = init;
                                oldFd->parentType = oldFd->type->isAuto();
                        } else {
                            das_yyerror("structure field is already declared "+name
                                +", use override to replace initial value instead",pDecl->at,
                                    CompilationError::invalid_override);
                        }
                    }
                }
            }
            if ( $annL ) {
                if ( $annL->size()!=1 ) {
                    das_yyerror("structures are only allowed one annotation", tokAt(@loc),
                        CompilationError::invalid_annotation);
                } else {
                    auto & annotation = $annL->back()->annotation;
                    auto & args = $annL->back()->arguments;
                    if ( !annotation->rtti_isStructureAnnotation() ) {
                        das_yyerror("structures are only allowed structure annotation", tokAt(@loc),
                            CompilationError::invalid_annotation);
                    } else {
                        if ( !g_Program->addStructureHandle(pStruct,
                            static_pointer_cast<StructureTypeAnnotation>(annotation), args) ) {
                                das_yyerror("handled structure is already defined "+pStruct->name,tokAt(@loc),
                                CompilationError::structure_already_declared);
                        } else {
                            pStruct->module->removeStructure(pStruct);
                        }
                    }
                }
                delete $annL;
            }
        }
        deleteVariableDeclarationList($list);
    }
    ;

variable_name_list
    :   NAME[name]  {
        auto pSL = new vector<string>();
        pSL->push_back(*$name);
        $$ = pSL;
        delete $name;
    }
    |   variable_name_list[list] ',' NAME[name] {
        $list->push_back(*$name);
        $$ = $list;
        delete $name;
    }
    ;

basic_type_declaration
    :   _TBOOL       { $$ = Type::tBool; }
    |   _TSTRING     { $$ = Type::tString; }
    |   _TINT        { $$ = Type::tInt; }
    |   _TINT64      { $$ = Type::tInt64; }
    |   _TINT2       { $$ = Type::tInt2; }
    |   _TINT3       { $$ = Type::tInt3; }
    |   _TINT4       { $$ = Type::tInt4; }
    |   _TUINT       { $$ = Type::tUInt; }
    |   _TUINT64     { $$ = Type::tUInt64; }
    |   _TUINT2      { $$ = Type::tUInt2; }
    |   _TUINT3      { $$ = Type::tUInt3; }
    |   _TUINT4      { $$ = Type::tUInt4; }
    |   _TFLOAT      { $$ = Type::tFloat; }
    |   _TFLOAT2     { $$ = Type::tFloat2; }
    |   _TFLOAT3     { $$ = Type::tFloat3; }
    |   _TFLOAT4     { $$ = Type::tFloat4; }
    |   _TVOID       { $$ = Type::tVoid; }
    |   _TRANGE      { $$ = Type::tRange; }
    |   _TURANGE     { $$ = Type::tURange; }
    |   _TDOUBLE     { $$ = Type::tDouble; }
    ;

structure_type_declaration
    :   name_in_namespace[name]  {
        $$ = g_Program->makeTypeDeclaration(tokAt(@name),*$name);
        if ( !$$ ) {
            $$ = new TypeDecl(Type::tVoid);
        }
        delete $name;
    }
    ;

auto_type_declaration
    :   _TAUTO[loc] {
        $$ = new TypeDecl(Type::autoinfer);
        $$->at = tokAt(@loc);
    }
    |   _TAUTO[loc] '(' NAME[alias] ')'  {
        $$ = new TypeDecl(Type::autoinfer);
        $$->at = tokAt(@loc);
        $$->alias = *$alias;
        delete $alias;
    }
    ;

type_declaration
    :   basic_type_declaration[basicType]                   { $$ = new TypeDecl($basicType); $$->at = tokAt(@basicType); }
    |   auto_type_declaration[typeDecl]                     { $$ = $typeDecl; }
    |   structure_type_declaration[typeDecl]                { $$ = $typeDecl; }
    |   type_declaration[typeDecl] '[' INTEGER[dimSize] ']' {
        $typeDecl->dim.push_back($dimSize);
        $$ = $typeDecl;
    }
    |   type_declaration[typeDecl] _CONST {
        $typeDecl->constant = true;
        $typeDecl->removeConstant = false;
        $$ = $typeDecl;
    }
    |   type_declaration[typeDecl] '!' _CONST {
        $typeDecl->constant = false;
        $typeDecl->removeConstant = true;
        $$ = $typeDecl;
    }
    |   type_declaration[typeDecl] '&' {
        $typeDecl->ref = true;
        $typeDecl->removeRef = false;
        $$ = $typeDecl;
    }
    |   type_declaration[typeDecl] '!' '&' {
        $typeDecl->ref = false;
        $typeDecl->removeRef = true;
        $$ = $typeDecl;
    }
    |   type_declaration[typeDecl] '?' {
        $$ = new TypeDecl(Type::tPointer);
        $$->firstType = TypeDeclPtr($typeDecl);
    }
    |   _ARRAY[loc] '<' type_declaration[typeDecl] '>' {
        $$ = new TypeDecl(Type::tArray);
        $$->at = tokAt(@loc);
        $$->firstType = TypeDeclPtr($typeDecl);
    }
    |   _TABLE[loc] '<' type_declaration[keyTypeDecl] ',' type_declaration[valueTypeDecl] '>' {
        $$ = new TypeDecl(Type::tTable);
        $$->at = tokAt(@loc);
        $$->firstType = TypeDeclPtr($keyTypeDecl);
        $$->secondType = TypeDeclPtr($valueTypeDecl);
    }
    |   _TBLOCK[loc] {
        $$ = new TypeDecl(Type::tBlock);
        $$->at = tokAt(@loc);
    }
    |   _TBLOCK[loc] '<' type_declaration[blockType] '>' {
        $$ = new TypeDecl(Type::tBlock);
        $$->at = tokAt(@loc);
        $$->firstType = TypeDeclPtr($blockType);
    }
    |   _TBLOCK[loc] '<' optional_function_argument_list[list] optional_function_type[result] '>' {
        $$ = new TypeDecl(Type::tBlock);
        $$->at = tokAt(@loc);
        $$->firstType = TypeDeclPtr($result);
        if ( $list ) {
            varDeclToTypeDecl($$, $list);
            deleteVariableDeclarationList($list);
        }
    }
    |   _TFUNCTION[loc] {
        $$ = new TypeDecl(Type::tFunction);
        $$->at = tokAt(@loc);
    }
    |   _TFUNCTION[loc] '<' type_declaration[blockType] '>' {
        $$ = new TypeDecl(Type::tFunction);
        $$->at = tokAt(@loc);
        $$->firstType = TypeDeclPtr($blockType);
    }
    |   _TFUNCTION[loc] '<' optional_function_argument_list[list] optional_function_type[result] '>' {
        $$ = new TypeDecl(Type::tFunction);
        $$->at = tokAt(@loc);
        $$->firstType = TypeDeclPtr($result);
        if ( $list ) {
            varDeclToTypeDecl($$, $list);
            deleteVariableDeclarationList($list);
        }
    }
    |   _TLAMBDA[loc] {
        $$ = new TypeDecl(Type::tLambda);
        $$->at = tokAt(@loc);
    }
    |   _TLAMBDA[loc] '<' type_declaration[blockType] '>' {
        $$ = new TypeDecl(Type::tLambda);
        $$->at = tokAt(@loc);
        $$->firstType = TypeDeclPtr($blockType);
    }
    |   _TLAMBDA[loc] '<' optional_function_argument_list[list] optional_function_type[result] '>' {
        $$ = new TypeDecl(Type::tLambda);
        $$->at = tokAt(@loc);
        $$->firstType = TypeDeclPtr($result);
        if ( $list ) {
            varDeclToTypeDecl($$, $list);
            deleteVariableDeclarationList($list);
        }
    }
    ;

make_decl
    :   make_struct_decl[msd]    { $$ = $msd; }
    |   make_dim_decl[mdd]       { $$ = $mdd; }
    ;

make_struct_fields
    :   NAME[fn] copy_or_move[com] expr[value] {
        auto mfd = make_shared<MakeFieldDecl>(tokAt(@fn),*$fn,ExpressionPtr($value),$com);
        delete $fn;
        auto msd = new MakeStruct();
        msd->push_back(mfd);
        $$ = msd;
    }
    |   make_struct_fields[msd] ',' NAME[fn] copy_or_move[com] expr[value] {
        auto mfd = make_shared<MakeFieldDecl>(tokAt(@fn),*$fn,ExpressionPtr($value),$com);
        delete $fn;
        ((MakeStruct *)$msd)->push_back(mfd);
        $$ = $msd;
    }
    ;

make_struct_dim
    :   make_struct_fields[msf] {
        auto msd = new ExprMakeStructure();
        msd->structs.push_back(MakeStructPtr($msf));
        $$ = msd;
    }
    |   make_struct_dim[msd] ';' make_struct_fields[msf] {
        ((ExprMakeStructure *) $msd)->structs.push_back(MakeStructPtr($msf));
        $$ = $msd;
    }
    ;

make_struct_decl
    :   '['[loc] '[' type_declaration[mkt] make_struct_dim[msd] ']' ']' {
        ((ExprMakeStructure *)$msd)->makeType = TypeDeclPtr($mkt);
        $msd->at = tokAt(@loc);
        $$ = $msd;
    }
    |   '['[loc] '[' type_declaration[mkt] '(' ')' make_struct_dim[msd] ']' ']' {
        ((ExprMakeStructure *)$msd)->makeType = TypeDeclPtr($mkt);
        ((ExprMakeStructure *)$msd)->useInitializer = true;
        $msd->at = tokAt(@loc);
        $$ = $msd;
    }
    ;

make_dim
    :   expr[val] {
        auto mka = new ExprMakeArray();
        mka->values.push_back(ExpressionPtr($val));
        $$ = mka;
    }
    |   make_dim[mka] ';' expr[val] {
        ((ExprMakeArray *) $mka)->values.push_back(ExpressionPtr($val));
        $$ = $mka;
    }
    ;

make_dim_decl
    :   '['[loc] '[' type_declaration[mkt] make_dim[mka] ']' ']' {
       ((ExprMakeArray *)$mka)->makeType = TypeDeclPtr($mkt);
       $mka->at = tokAt(@loc);
       $$ = $mka;
    }
    ;

%%

void das_yyerror(const string & error, const LineInfo & at, CompilationError cerr) {
    g_Program->error(error,at,cerr);
}

void das_yyerror(const string & error, CompilationError cerr) {
    g_Program->error(error,LineInfo(g_FileAccessStack.back(),
        yylloc.first_column,yylloc.first_line),cerr);
}

vector<ExpressionPtr> sequenceToList ( Expression * arguments ) {
    vector<ExpressionPtr> argList;
    auto arg = arguments;
    if ( arg->rtti_isSequence() ) {
        while ( arg->rtti_isSequence() ) {
            auto pSeq = static_cast<ExprSequence *>(arg);
            DAS_ASSERT(!pSeq->right->rtti_isSequence());
            argList.push_back(pSeq->right);
            arg = pSeq->left.get();
        }
        argList.push_back(arg->shared_from_this());
        reverse(argList.begin(),argList.end());
        delete arguments;
    } else {
        argList.push_back(ExpressionPtr(arg));
    }
    return argList;
}

ExprLooksLikeCall * parseFunctionArguments ( ExprLooksLikeCall * pCall, Expression * arguments ) {
    pCall->arguments = sequenceToList(arguments);
    return pCall;
}

void deleteVariableDeclarationList ( vector<VariableDeclaration *> * list ) {
    if ( !list ) return;
    for ( auto pD : *list )
        delete pD;
    delete list;
}

LineInfo tokAt ( const struct YYLTYPE & li ) {
    return LineInfo(g_FileAccessStack.back(), li.first_column,li.first_line);
}

Annotation * findAnnotation ( const string & name, const LineInfo & at ) {
    auto ann = g_Program->findAnnotation(name);
    if ( ann.size()==1 ) {
        return ann.back().get();
    } else if ( ann.size()==0 ) {
        das_yyerror("annotation " + name + " not found", at, CompilationError::annotation_not_found );
        return nullptr;
    } else {
        string candidates = g_Program->describeCandidates(ann);
        das_yyerror("too many options for annotation " + name + "\n" + candidates, at, CompilationError::annotation_not_found );
        return nullptr;
    }
}

void varDeclToTypeDecl ( TypeDecl * pType, vector<VariableDeclaration*> * list ) {
    for ( auto pDecl : *list ) {
        if ( pDecl->pTypeDecl ) {
            for ( size_t ai=0; ai!= pDecl->pNameList->size(); ++ai ) {
                auto pVarType = make_shared<TypeDecl>(*pDecl->pTypeDecl);
                if ( pDecl->pInit ) {
                    das_yyerror("can't have default values in type declaration",
                    pDecl->at,CompilationError::cant_initialize);
                }
                pType->argTypes.push_back(pVarType);
            }
        }
    }
}


