#line 1 "ds_lexer.cpp"

#line 3 "ds_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer das_yy_create_buffer
#define yy_delete_buffer das_yy_delete_buffer
#define yy_scan_buffer das_yy_scan_buffer
#define yy_scan_string das_yy_scan_string
#define yy_scan_bytes das_yy_scan_bytes
#define yy_init_buffer das_yy_init_buffer
#define yy_flush_buffer das_yy_flush_buffer
#define yy_load_buffer_state das_yy_load_buffer_state
#define yy_switch_to_buffer das_yy_switch_to_buffer
#define yypush_buffer_state das_yypush_buffer_state
#define yypop_buffer_state das_yypop_buffer_state
#define yyensure_buffer_stack das_yyensure_buffer_stack
#define yy_flex_debug das_yy_flex_debug
#define yyin das_yyin
#define yyleng das_yyleng
#define yylex das_yylex
#define yylineno das_yylineno
#define yyout das_yyout
#define yyrestart das_yyrestart
#define yytext das_yytext
#define yywrap das_yywrap
#define yyalloc das_yyalloc
#define yyrealloc das_yyrealloc
#define yyfree das_yyfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define das_yy_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer das_yy_create_buffer
#endif

#ifdef yy_delete_buffer
#define das_yy_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer das_yy_delete_buffer
#endif

#ifdef yy_scan_buffer
#define das_yy_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer das_yy_scan_buffer
#endif

#ifdef yy_scan_string
#define das_yy_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string das_yy_scan_string
#endif

#ifdef yy_scan_bytes
#define das_yy_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes das_yy_scan_bytes
#endif

#ifdef yy_init_buffer
#define das_yy_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer das_yy_init_buffer
#endif

#ifdef yy_flush_buffer
#define das_yy_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer das_yy_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define das_yy_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state das_yy_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define das_yy_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer das_yy_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define das_yypush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state das_yypush_buffer_state
#endif

#ifdef yypop_buffer_state
#define das_yypop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state das_yypop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define das_yyensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack das_yyensure_buffer_stack
#endif

#ifdef yylex
#define das_yylex_ALREADY_DEFINED
#else
#define yylex das_yylex
#endif

#ifdef yyrestart
#define das_yyrestart_ALREADY_DEFINED
#else
#define yyrestart das_yyrestart
#endif

#ifdef yylex_init
#define das_yylex_init_ALREADY_DEFINED
#else
#define yylex_init das_yylex_init
#endif

#ifdef yylex_init_extra
#define das_yylex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra das_yylex_init_extra
#endif

#ifdef yylex_destroy
#define das_yylex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy das_yylex_destroy
#endif

#ifdef yyget_debug
#define das_yyget_debug_ALREADY_DEFINED
#else
#define yyget_debug das_yyget_debug
#endif

#ifdef yyset_debug
#define das_yyset_debug_ALREADY_DEFINED
#else
#define yyset_debug das_yyset_debug
#endif

#ifdef yyget_extra
#define das_yyget_extra_ALREADY_DEFINED
#else
#define yyget_extra das_yyget_extra
#endif

#ifdef yyset_extra
#define das_yyset_extra_ALREADY_DEFINED
#else
#define yyset_extra das_yyset_extra
#endif

#ifdef yyget_in
#define das_yyget_in_ALREADY_DEFINED
#else
#define yyget_in das_yyget_in
#endif

#ifdef yyset_in
#define das_yyset_in_ALREADY_DEFINED
#else
#define yyset_in das_yyset_in
#endif

#ifdef yyget_out
#define das_yyget_out_ALREADY_DEFINED
#else
#define yyget_out das_yyget_out
#endif

#ifdef yyset_out
#define das_yyset_out_ALREADY_DEFINED
#else
#define yyset_out das_yyset_out
#endif

#ifdef yyget_leng
#define das_yyget_leng_ALREADY_DEFINED
#else
#define yyget_leng das_yyget_leng
#endif

#ifdef yyget_text
#define das_yyget_text_ALREADY_DEFINED
#else
#define yyget_text das_yyget_text
#endif

#ifdef yyget_lineno
#define das_yyget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno das_yyget_lineno
#endif

#ifdef yyset_lineno
#define das_yyset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno das_yyset_lineno
#endif

#ifdef yywrap
#define das_yywrap_ALREADY_DEFINED
#else
#define yywrap das_yywrap
#endif

#ifdef yyalloc
#define das_yyalloc_ALREADY_DEFINED
#else
#define yyalloc das_yyalloc
#endif

#ifdef yyrealloc
#define das_yyrealloc_ALREADY_DEFINED
#else
#define yyrealloc das_yyrealloc
#endif

#ifdef yyfree
#define das_yyfree_ALREADY_DEFINED
#else
#define yyfree das_yyfree
#endif

#ifdef yytext
#define das_yytext_ALREADY_DEFINED
#else
#define yytext das_yytext
#endif

#ifdef yyleng
#define das_yyleng_ALREADY_DEFINED
#else
#define yyleng das_yyleng
#endif

#ifdef yyin
#define das_yyin_ALREADY_DEFINED
#else
#define yyin das_yyin
#endif

#ifdef yyout
#define das_yyout_ALREADY_DEFINED
#else
#define yyout das_yyout
#endif

#ifdef yy_flex_debug
#define das_yy_flex_debug_ALREADY_DEFINED
#else
#define yy_flex_debug das_yy_flex_debug
#endif

#ifdef yylineno
#define das_yylineno_ALREADY_DEFINED
#else
#define yylineno das_yylineno
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define das_yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 200
#define YY_END_OF_BUFFER 201
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[574] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       28,   28,    0,    0,    0,    0,  201,  200,   27,   25,
       23,   27,   24,   27,   27,   27,   22,   21,   20,   19,
       16,   22,   17,   12,   13,   12,   12,   12,    8,    9,
       30,   29,   28,  199,  197,  198,  196,  199,  126,  199,
      199,  199,  199,  151,  150,  199,  199,  199,  199,  199,
      137,  137,  199,  199,  199,  199,  199,  199,  125,  153,
      152,  199,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  155,  199,  154,   15,   14,    0,   23,    0,

        2,    3,    6,   18,   11,   10,   30,   28,  183,  174,
      175,    0,    0,    4,  173,  178,  170,  179,  171,  168,
      142,    5,    7,  172,  143,  137,    0,  144,  135,  136,
        0,  135,  156,  167,  169,  187,  180,  163,  182,  192,
      181,  185,  166,  164,  165,    0,    0,  125,  193,  194,
      177,  125,  125,  125,   84,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,   34,  125,   78,   85,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,

      125,  125,  125,  125,  125,  125,  125,  125,  195,  176,
      157,    0,    0,   26,    0,  133,    0,    0,    0,    0,
        0,    0,    0,  142,    0,    0,  198,    0,  142,    0,
      143,    0,    0,  145,  134,  141,  148,  186,  189,    0,
      159,    0,    0,  188,  184,  162,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,   40,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,   32,  125,
      125,  125,  125,  125,  105,  125,  125,  125,   43,  125,
       95,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,   49,

      125,  125,  125,  125,  125,  125,   45,  125,  125,  125,
      125,  125,    0,    0,  132,  127,  130,  129,  131,  128,
        0,  142,  146,    0,    0,  142,    0,    0,  143,  147,
      145,    0,  139,  140,  191,  160,  161,    0,  190,  125,
       87,  125,   99,  125,  125,  100,  125,   68,  125,  125,
      125,  125,  125,  125,   36,   38,   48,  125,  125,  125,
      125,  125,  125,  125,   53,  125,  125,  125,  109,  110,
      111,  125,  106,  125,  125,  125,    0,    0,  125,   89,
      125,  125,  125,   70,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,   97,  125,   94,

      112,  125,  125,  125,    0,    0,  125,  101,  125,  125,
       41,  125,    0,    0,  142,  146,  149,  138,    0,  158,
      125,   76,  125,   59,   92,   47,   65,  125,  125,   86,
      125,  125,  125,   98,  125,  121,  125,  125,  125,  125,
      107,  108,  125,   52,  125,    0,  125,  125,  125,  125,
      125,  103,  125,  125,  125,  125,   88,  125,  125,  125,
      125,  125,   75,   63,  125,  125,  125,  117,  118,  119,
      125,  114,  125,  125,  125,    0,  125,   67,   33,   91,
        0,  125,  125,  125,   96,  120,   74,  125,  125,  122,
      123,  124,  125,  125,  125,  125,  125,   61,    0,   42,

       54,  125,  125,  125,   55,  125,  125,  125,   90,   81,
      125,  125,  102,   46,  125,  125,  115,  116,   83,   69,
      104,    0,   44,  125,    0,  125,  125,  125,  125,   39,
      125,  125,  125,   31,  125,  125,   56,  125,   50,  125,
       58,  125,  125,   51,  125,   64,    0,   73,  113,   66,
       80,   60,  125,   79,   77,   57,   72,  125,  125,  125,
      125,   93,    1,   62,  125,   82,  125,   35,  125,  125,
       71,   37,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   26,   28,   26,   29,    1,   30,
       31,   32,   33,   34,   35,   35,   35,   35,   36,   37,
       38,   38,   38,   38,   38,   39,   38,   38,   38,   38,
       38,   38,   38,   38,   40,   38,   38,   41,   38,   38,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,

       52,   53,   54,   55,   56,   38,   57,   58,   59,   60,
       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   38,   72,   73,   74,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[75] =
    {   0,
        1,    2,    3,    2,    2,    1,    4,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        5,    5,    5,    5,    5,    5,    5,    5,    1,    1,
        1,    1,    1,    1,    6,    5,    5,    7,    7,    7,
        7,    1,    1,    1,    1,    7,    7,    6,    6,    6,
        6,    5,    5,    7,    7,    7,    7,    8,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    1,    1,    1
    } ;

static const flex_int16_t yy_base[593] =
    {   0,
        0,    0,    0,    8,   15,   22,   27,   29,  948,  947,
       32,   36,   94,    0,  946,  945,  947,  952,  952,   48,
      952,   52,   57,   45,  926,   28,  952,  952,  952,  952,
      952,    2,  952,  952,  952,  952,  925,  929,  952,  952,
        0,  952,  938,  952,  952,  952,  952,  911,  952,   56,
      910,  909,  896,  952,  952,   44,  153,  154,  152,  167,
      180,   22,   57,  163,   14,   58,  176,  195,    0,  141,
      952,  907,  163,  173,  187,  163,  181,  196,  188,  200,
      140,  876,  144,   23,  122,  174,  212,  208,  220,  162,
      135,  880,  863,  211,  952,  952,  952,  283,  952,  272,

      952,  952,  261,  952,  952,  952,    0,  929,  952,  952,
      952,  921,  258,  952,  952,  952,  952,  952,  952,  952,
      267,  952,  270,  952,  276,  236,  314,  952,  952,  216,
        0,  879,  952,  952,  952,  238,  952,  341,  952,  952,
      952,  260,  952,  952,  952,  303,  858,    0,  952,  952,
      952,  865,  878,  864,    0,  861,  860,  864,  863,  871,
      857,  873,  860,  257,  852,  258,  851,  855,  858,  855,
      853,  849,  852,  851,  844,    0,  847,  281,    0,  856,
      267,  841,  855,  836,  846,  296,  851,  837,  852,  840,
      300,  838,  850,  849,  301,  847,  284,  833,  832,  833,

      827,  841,  842,  825,  832,  301,  821,  834,  952,  952,
      952,  346,  355,  952,  356,  952,  873,  872,  871,  870,
      869,  868,  361,  952,  826,  361,  952,  375,  354,  376,
      952,  825,  392,  400,  952,  371,  952,  846,  952,  430,
      952,  439,  856,  952,  844,  952,  808,  809,  824,  810,
      817,  819,  810,  819,  800,  800,  343,    0,  812,  811,
      813,  808,  808,  800,  302,  793,  809,  808,    0,  805,
      802,  792,  794,  793,  424,  786,  797,  799,  452,  780,
        0,  788,  781,  788,  779,  777,  783,  786,  778,  778,
      770,  769,  773,  770,  769,  766,  399,  773,  778,    0,

      771,  776,  761,  778,  777,  764,  458,  772,  758,  763,
      765,  761,  458,  467,  952,  952,  952,  952,  952,  952,
      467,  475,  952,  501,  513,  952,  765,  521,  529,  952,
      952,  764,  952,  244,  952,  952,  952,  813,  952,  751,
        0,  743,    0,  757,  755,    0,  754,    0,  745,  743,
      752,  741,  753,  747,    0,    0,    0,  754,  747,  750,
      743,  734,  733,  734,    0,  741,  729,  768,    0,    0,
        0,  769,    0,  745,  734,  740,  503,  770,  731,    0,
      740,  726,  722,    0,  729,  732,  715,  716,  725,  716,
      727,  726,  711,  720,  715,  724,  721,    0,  720,  380,

      536,  718,  705,  715,  563,  748,  719,    0,  714,  713,
        0,  713,  756,  548,  567,  952,  952,  952,  759,  952,
      713,    0,  708,    0,    0,    0,    0,  695,  672,    0,
      671,  646,  661,    0,  634,  444,  628,  635,  574,  572,
        0,    0,  556,    0,  573,  616,  566,  551,  556,  559,
      564,    0,  561,  560,  547,  550,    0,  558,  562,  557,
      552,  539,    0,    0,  551,  542,  574,    0,    0,    0,
      575,    0,  547,  532,  545,  593,  526,    0,    0,    0,
        0,  535,  526,  514,    0,    0,    0,  524,  508,    0,
        0,    0,  517,  511,  506,  480,  469,    0,  524,  952,

        0,  465,  460,  473,    0,  458,  456,  467,    0,    0,
      456,  471,    0,    0,  463,  462,    0,    0,    0,    0,
        0,  510,  952,  445,  503,  443,  455,  425,  410,    0,
      414,  412,  405,    0,  381,  376,    0,  378,    0,  343,
        0,  330,  409,    0,  332,    0,  372,    0,    0,    0,
        0,    0,  288,    0,    0,    0,    0,  263,  253,  251,
      208,    0,  952,    0,  206,    0,  190,    0,  105,   40,
        0,    0,  952,  625,  633,  641,  649,  657,  665,  673,
      681,  689,  693,  701,  705,  713,  717,  721,  727,  735,
      743,  751

    } ;

static const flex_int16_t yy_def[593] =
    {   0,
      574,  574,  575,  575,  576,  576,  577,  577,  578,  578,
      579,  579,  573,   13,  580,  580,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      581,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  582,  573,  573,  573,  573,  573,  573,  573,
      573,   61,  573,  573,  573,  573,  573,  573,  583,  573,
      573,  573,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  573,  573,  573,  573,  573,  573,  573,  573,

      573,  573,  584,  573,  573,  573,  581,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      585,  573,  586,  573,  587,   61,  573,  573,  573,  573,
      588,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  583,  573,  573,
      573,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,

      583,  583,  583,  583,  583,  583,  583,  583,  573,  573,
      573,  573,  584,  573,  584,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  586,  573,  586,  587,  573,
      573,  573,  573,  573,  573,  588,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,

      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  573,  584,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  586,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  589,  573,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  573,  573,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,

      583,  583,  583,  583,  573,  573,  583,  583,  583,  583,
      583,  583,  573,  573,  573,  573,  573,  573,  589,  573,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  590,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  591,  583,  583,  583,  583,
      592,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  590,  573,

      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  591,  573,  583,  592,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  573,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  573,  583,  583,  583,  583,  583,  583,  583,
      583,  583,    0,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573

    } ;

static const flex_int16_t yy_nxt[1027] =
    {   0,
      573,   20,   21,   22,   23,  573,  573,   24,  104,   20,
       21,   22,   23,  573,   25,   24,   28,   29,   30,   26,
      573,   31,   25,   28,   29,   30,  573,   26,   31,   35,
       36,   35,   36,   42,   18,   18,   43,   42,   18,   18,
       43,   37,  102,   37,  139,  140,   38,  103,   38,   98,
       99,   98,   98,   98,   99,   98,   98,   32,   98,   99,
       98,   98,  573,  114,   32,  100,  100,  100,  100,  100,
      100,  100,  100,  104,  115,  104,  100,  100,  100,  100,
      100,  100,  100,  100,  186,  133,   33,  134,  141,  142,
      187,  573,  572,   33,   44,   45,   46,   47,   47,   48,

       49,   50,   44,   51,   52,   53,   54,   55,   56,   57,
       44,   58,   59,   60,   61,   62,   62,   62,   62,   62,
       62,   62,   63,   64,   65,   66,   67,   68,   69,   69,
       69,   69,   69,   69,   69,   70,   44,   71,   72,   69,
       44,   73,   74,   75,   76,   77,   78,   79,   69,   80,
       69,   81,   82,   83,   84,   85,   69,   86,   87,   88,
       89,   90,   91,   69,   92,   93,   94,   95,  116,  188,
      571,  118,  121,  121,  121,  121,  121,  121,  121,  121,
      135,  122,  149,  117,  119,  120,  123,  181,  189,  206,
      207,  182,  136,  137,  143,  184,  146,  124,  125,  146,

      126,  126,  126,  126,  126,  126,  126,  126,  144,  204,
      185,  152,  150,  153,  164,  127,  128,  145,  129,  130,
      131,  190,  205,  165,  147,  191,  154,  155,  157,  156,
      158,  127,  128,  159,  161,  138,  160,  132,  166,  174,
      167,  210,  211,  169,  162,  570,  130,  163,  175,  131,
      168,  170,  176,  171,  235,  196,  172,  569,  177,  178,
      568,  192,  173,  214,  179,  180,  193,  238,  239,  216,
      194,  197,  227,  235,  198,  200,  573,  195,  199,  201,
      215,  202,  418,  203,   98,   99,   98,   98,  212,  228,
      244,  245,  100,  100,  100,  100,  100,  100,  100,  100,

      217,  418,  223,  224,  146,  573,  218,  146,  567,  258,
      219,  230,  231,  262,  259,  277,  566,  220,  223,  224,
      260,  221,  263,  222,  225,  278,  565,  230,  231,  233,
      274,  233,  147,  232,  234,  234,  234,  234,  234,  234,
      234,  234,  240,  241,  242,  240,  275,  283,  296,  289,
      299,  564,  309,  358,  300,  290,  310,  214,  214,  359,
      243,  284,  291,  227,  297,  292,  313,  313,  313,  313,
      313,  313,  313,  313,  215,  314,  321,  227,  321,  563,
      228,  322,  322,  322,  322,  322,  322,  322,  322,  325,
      326,  328,  562,  328,  324,  559,  329,  329,  329,  329,

      329,  329,  329,  329,  558,  325,  326,  350,  351,  333,
      334,  327,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  333,  557,
      465,  242,  241,  242,  242,  466,  331,  334,  336,  556,
      242,  241,  242,  242,  555,  368,  369,  370,  371,  243,
      372,  373,  331,  377,  395,  377,  377,  332,  243,  405,
      560,  405,  405,  337,  561,  396,  490,  491,  492,  214,
      554,  378,  553,  552,  413,  551,  550,  406,  313,  313,
      313,  313,  313,  313,  313,  313,  314,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,

      322,  322,  322,  227,  377,  549,  377,  377,  548,  547,
      546,  224,  523,  407,  545,  544,  543,  542,  541,  540,
      324,  539,  378,  538,  537,  536,  500,  224,  414,  535,
      414,  534,  225,  415,  415,  415,  415,  415,  415,  415,
      415,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  467,  468,  469,
      470,  533,  471,  472,  405,  231,  405,  405,  415,  415,
      415,  415,  415,  415,  415,  415,  532,  531,  530,  529,
      528,  231,  406,  527,  526,  524,  232,  415,  415,  415,
      415,  415,  415,  415,  415,  523,  521,  520,  519,  518,

      517,  516,  515,  326,  514,  513,  512,  511,  510,  509,
      508,  507,  506,  505,  504,  503,  502,  501,  500,  326,
      498,  497,  496,  495,  327,   18,   18,   18,   18,   18,
       18,   18,   18,   19,   19,   19,   19,   19,   19,   19,
       19,   27,   27,   27,   27,   27,   27,   27,   27,   34,
       34,   34,   34,   34,   34,   34,   34,   39,   39,   39,
       39,   39,   39,   39,   39,   41,   41,   41,   41,   41,
       41,   41,   41,   96,   96,   96,   96,   96,   96,   96,
       96,  107,  494,  493,  107,  107,  107,  107,  107,  112,
      112,  489,  112,  112,  112,  112,  112,  148,  148,  148,

      148,  213,  213,  213,  213,  213,  213,  213,  213,  121,
      488,  487,  121,  226,  226,  226,  226,  226,  226,  226,
      226,  229,  486,  485,  229,  236,  236,  419,  419,  419,
      419,  419,  419,  419,  419,  499,  499,  499,  499,  499,
      499,  499,  499,  522,  522,  522,  522,  522,  522,  522,
      522,  525,  525,  525,  484,  525,  525,  525,  525,  483,
      482,  420,  481,  480,  479,  478,  477,  476,  475,  474,
      473,  464,  463,  462,  461,  460,  459,  458,  457,  456,
      455,  454,  453,  452,  451,  450,  449,  448,  447,  446,
      445,  444,  443,  442,  441,  440,  439,  438,  437,  436,

      435,  434,  433,  432,  431,  430,  429,  428,  427,  426,
      425,  424,  423,  422,  421,  420,  417,  416,  412,  411,
      410,  409,  408,  404,  403,  402,  401,  400,  399,  398,
      397,  394,  393,  392,  391,  390,  389,  388,  387,  386,
      385,  384,  383,  382,  381,  380,  379,  376,  375,  374,
      367,  366,  365,  364,  363,  362,  361,  360,  357,  356,
      355,  354,  353,  352,  349,  348,  347,  346,  345,  344,
      343,  342,  341,  340,  339,  338,  335,  330,  323,  320,
      319,  318,  317,  316,  315,  312,  311,  308,  307,  306,
      305,  304,  303,  302,  301,  298,  295,  294,  293,  288,

      287,  286,  285,  282,  281,  280,  279,  276,  273,  272,
      271,  270,  269,  268,  267,  266,  265,  264,  261,  257,
      256,  255,  254,  253,  252,  251,  250,  249,  248,  247,
      246,  237,  216,  108,  209,  208,  183,  151,  113,  111,
      110,  109,  108,  106,  105,  101,  573,   97,   97,   40,
       40,   17,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,

      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573
    } ;

static const flex_int16_t yy_chk[1027] =
    {   0,
        0,    3,    3,    3,    3,    0,    0,    3,   32,    4,
        4,    4,    4,    0,    3,    4,    5,    5,    5,    3,
        0,    5,    4,    6,    6,    6,    0,    4,    6,    7,
        7,    8,    8,   11,   11,   11,   11,   12,   12,   12,
       12,    7,   26,    8,   65,   65,    7,   26,    8,   20,
       20,   20,   20,   22,   22,   22,   22,    5,   23,   23,
       23,   23,   62,   56,    6,   24,   24,   24,   24,   24,
       24,   24,   24,   32,   56,   32,   50,   50,   50,   50,
       50,   50,   50,   50,   84,   63,    5,   63,   66,   66,
       84,   62,  570,    6,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   57,   85,
      569,   58,   59,   59,   59,   59,   59,   59,   59,   59,
       64,   60,   70,   57,   58,   58,   60,   81,   85,   91,
       91,   81,   64,   64,   67,   83,   68,   60,   61,   68,

       61,   61,   61,   61,   61,   61,   61,   61,   67,   90,
       83,   73,   70,   73,   76,   61,   61,   67,   61,   61,
       61,   86,   90,   76,   68,   86,   73,   73,   74,   73,
       74,   61,   61,   74,   75,   64,   74,   61,   77,   79,
       77,   94,   94,   78,   75,  567,   61,   75,   79,   61,
       77,   78,   80,   78,  130,   88,   78,  565,   80,   80,
      561,   87,   78,  103,   80,   80,   87,  136,  136,  113,
       87,   88,  123,  130,   88,   89,  126,   87,   88,   89,
      103,   89,  334,   89,   98,   98,   98,   98,  100,  123,
      142,  142,  100,  100,  100,  100,  100,  100,  100,  100,

      113,  334,  121,  121,  146,  126,  113,  146,  560,  164,
      113,  125,  125,  166,  164,  181,  559,  113,  121,  121,
      164,  113,  166,  113,  121,  181,  558,  125,  125,  127,
      178,  127,  146,  125,  127,  127,  127,  127,  127,  127,
      127,  127,  138,  138,  138,  138,  178,  186,  195,  191,
      197,  553,  206,  265,  197,  191,  206,  213,  215,  265,
      138,  186,  191,  226,  195,  191,  212,  212,  212,  212,
      212,  212,  212,  212,  213,  215,  223,  228,  223,  547,
      226,  223,  223,  223,  223,  223,  223,  223,  223,  229,
      229,  230,  545,  230,  228,  542,  230,  230,  230,  230,

      230,  230,  230,  230,  540,  229,  229,  257,  257,  236,
      236,  229,  233,  233,  233,  233,  233,  233,  233,  233,
      234,  234,  234,  234,  234,  234,  234,  234,  236,  538,
      400,  240,  240,  240,  240,  400,  234,  236,  240,  536,
      242,  242,  242,  242,  535,  275,  275,  275,  275,  240,
      275,  275,  234,  279,  297,  279,  279,  234,  242,  307,
      543,  307,  307,  240,  543,  297,  436,  436,  436,  314,
      533,  279,  532,  531,  313,  529,  528,  307,  313,  313,
      313,  313,  313,  313,  313,  313,  314,  321,  321,  321,
      321,  321,  321,  321,  321,  322,  322,  322,  322,  322,

      322,  322,  322,  324,  377,  527,  377,  377,  526,  525,
      524,  322,  522,  307,  516,  515,  512,  511,  508,  507,
      324,  506,  377,  504,  503,  502,  499,  322,  325,  497,
      325,  496,  322,  325,  325,  325,  325,  325,  325,  325,
      325,  328,  328,  328,  328,  328,  328,  328,  328,  329,
      329,  329,  329,  329,  329,  329,  329,  401,  401,  401,
      401,  495,  401,  401,  405,  329,  405,  405,  414,  414,
      414,  414,  414,  414,  414,  414,  494,  493,  489,  488,
      484,  329,  405,  483,  482,  477,  329,  415,  415,  415,
      415,  415,  415,  415,  415,  476,  475,  474,  473,  471,

      467,  466,  465,  415,  462,  461,  460,  459,  458,  456,
      455,  454,  453,  451,  450,  449,  448,  447,  446,  415,
      445,  443,  440,  439,  415,  574,  574,  574,  574,  574,
      574,  574,  574,  575,  575,  575,  575,  575,  575,  575,
      575,  576,  576,  576,  576,  576,  576,  576,  576,  577,
      577,  577,  577,  577,  577,  577,  577,  578,  578,  578,
      578,  578,  578,  578,  578,  579,  579,  579,  579,  579,
      579,  579,  579,  580,  580,  580,  580,  580,  580,  580,
      580,  581,  438,  437,  581,  581,  581,  581,  581,  582,
      582,  435,  582,  582,  582,  582,  582,  583,  583,  583,

      583,  584,  584,  584,  584,  584,  584,  584,  584,  585,
      433,  432,  585,  586,  586,  586,  586,  586,  586,  586,
      586,  587,  431,  429,  587,  588,  588,  589,  589,  589,
      589,  589,  589,  589,  589,  590,  590,  590,  590,  590,
      590,  590,  590,  591,  591,  591,  591,  591,  591,  591,
      591,  592,  592,  592,  428,  592,  592,  592,  592,  423,
      421,  419,  413,  412,  410,  409,  407,  406,  404,  403,
      402,  399,  397,  396,  395,  394,  393,  392,  391,  390,
      389,  388,  387,  386,  385,  383,  382,  381,  379,  378,
      376,  375,  374,  372,  368,  367,  366,  364,  363,  362,

      361,  360,  359,  358,  354,  353,  352,  351,  350,  349,
      347,  345,  344,  342,  340,  338,  332,  327,  312,  311,
      310,  309,  308,  306,  305,  304,  303,  302,  301,  299,
      298,  296,  295,  294,  293,  292,  291,  290,  289,  288,
      287,  286,  285,  284,  283,  282,  280,  278,  277,  276,
      274,  273,  272,  271,  270,  268,  267,  266,  264,  263,
      262,  261,  260,  259,  256,  255,  254,  253,  252,  251,
      250,  249,  248,  247,  245,  243,  238,  232,  225,  222,
      221,  220,  219,  218,  217,  208,  207,  205,  204,  203,
      202,  201,  200,  199,  198,  196,  194,  193,  192,  190,

      189,  188,  187,  185,  184,  183,  182,  180,  177,  175,
      174,  173,  172,  171,  170,  169,  168,  167,  165,  163,
      162,  161,  160,  159,  158,  157,  156,  154,  153,  152,
      147,  132,  112,  108,   93,   92,   82,   72,   53,   52,
       51,   48,   43,   38,   37,   25,   17,   16,   15,   10,
        9,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,

      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[201] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 
    1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
    0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "ds_lexer.lpp"
#line 2 "ds_lexer.lpp"
    #include "daScript/misc/platform.h"
    #include <inttypes.h>
    #include "daScript/ast/ast.h"
    #include "ds_parser.hpp"

    #ifndef SCNi64
      #define SCNi64       "lli"
    #endif
    #ifndef SCNu64
      #define SCNu64       "llu"
    #endif
    #ifndef SCNx64
      #define SCNx64       "llx"
    #endif

    using namespace das;

    #define YY_NO_INPUT

    void das_yyerror(const string & error);
    void das_yyfatalerror(const string & error, CompilationError cerr = CompilationError::syntax_error);

    int das_current_line_indent = 0;
    int das_indent_level = 0;
    int das_def_tab_size = 4;
    int das_tab_size = das_def_tab_size;   // only 2,4 or 8
    int das_nested_parentheses = 0;
    int das_nested_curly_braces = 0;
    int das_nested_square_braces = 0;
    int das_nested_sb = 0;
    int das_yycolumn = 0;
    int das_c_style_depth = 0;
    int das_arrow_depth = 0;
    bool das_need_oxford_comma = true;
    bool das_force_oxford_comma = false;
    bool das_supress_errors = false;
    bool das_in_normal = false;
    vector<int> das_line_no;
    das_set<string> das_already_include;
    Structure * g_thisStructure = nullptr;

    namespace das {
        das_map<string,string>   das_module_alias;
    }

    #define YY_USER_ACTION \
        das_yylloc.first_line = das_yylloc.last_line = yylineno; \
        das_yylloc.first_column = das_yycolumn; \
        das_yylloc.last_column = das_yycolumn + yyleng - 1; \
        YYCOLUMN (das_yycolumn += yyleng, "YY_USER_ACTION");

#ifdef FLEX_DEBUG
    void YYCOLUMN ( int, const char * comment ) {
        printf("%i:%i %s\n", das_yycolumn, yylineno, comment ? comment : "");
    }
#else
    #define YYCOLUMN(expr,comment)  ((expr))
#endif

void YYTAB() {
    // YYCOLUMN(das_yycolumn = (das_yycolumn - 1 + das_tab_size) & ~(das_tab_size-1), "TAB");
}

void YYNEWLINE() {
    YYCOLUMN(das_yycolumn = 0,"NEW LINE");
}

#line 1228 "ds_lexer.cpp"
#define YY_NO_UNISTD_H 1
/* %option debug */

#line 1232 "ds_lexer.cpp"

#define INITIAL 0
#define indent 1
#define strb 2
#define c_comment 3
#define cpp_comment 4
#define include 5
#define normal 6
#define reader 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 87 "ds_lexer.lpp"


#line 1459 "ds_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 574 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 573 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 89 "ds_lexer.lpp"
{
    string txt = yytext;
    int lRow, lCol;
    char lFile[256];
    if ( sscanf ( yytext, "#%i,%i,\"%255s\"#", &lRow, &lCol, lFile )==3 ) {
        lFile[strlen(lFile)-2] = 0;
        auto cfi = g_FileAccessStack.back();
        string incFileName = g_Access->getIncludeFileName(cfi->name,lFile);
        auto info = g_Access->getFileInfo(incFileName);
        if ( !info ) {
            das_yyfatalerror("can't open "+incFileName);
        } else {
            g_FileAccessStack.pop_back();
            g_FileAccessStack.push_back(info);
            yylineno = lRow;
            YYCOLUMN ( das_yycolumn = lCol, "LINE DIRECTIVE");
        }
    } else {
        das_yyfatalerror ("can't process line directive " + string(yytext),
            CompilationError::invalid_line_directive); return LEXER_ERROR;
    }
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 111 "ds_lexer.lpp"
das_yyfatalerror ("Unexpected */", CompilationError::unexpected_close_comment); return LEXER_ERROR;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 112 "ds_lexer.lpp"
BEGIN(c_comment); das_c_style_depth = 1; das_in_normal = false;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 113 "ds_lexer.lpp"
das_yyfatalerror ("Unexpected */", CompilationError::unexpected_close_comment); return LEXER_ERROR;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 114 "ds_lexer.lpp"
BEGIN(c_comment); das_c_style_depth = 1; das_in_normal = true;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 115 "ds_lexer.lpp"
BEGIN(cpp_comment);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 116 "ds_lexer.lpp"
BEGIN(cpp_comment);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 117 "ds_lexer.lpp"

	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 118 "ds_lexer.lpp"
BEGIN(normal); unput('\n');
	YY_BREAK
case YY_STATE_EOF(cpp_comment):
#line 119 "ds_lexer.lpp"
BEGIN(normal);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 120 "ds_lexer.lpp"
das_c_style_depth ++;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 121 "ds_lexer.lpp"
{
    das_c_style_depth --;
    if ( das_c_style_depth==0 ) {
        if ( das_in_normal ) {
            BEGIN(normal);
        } else {
            BEGIN(indent);
        }
    }
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 131 "ds_lexer.lpp"
/* skipping comment body */
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 132 "ds_lexer.lpp"
/* skipping comment eol */
	YY_BREAK
case YY_STATE_EOF(c_comment):
#line 133 "ds_lexer.lpp"
{
    das_yyfatalerror("end of file encountered inside c-style comment", CompilationError::comment_contains_eof);
    BEGIN(normal);
}
	YY_BREAK
case YY_STATE_EOF(reader):
#line 137 "ds_lexer.lpp"
{
    das_yyfatalerror("reader constant exceeds file", CompilationError::string_constant_exceeds_file);
    BEGIN(normal);
    return END_OF_READ;
}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 142 "ds_lexer.lpp"
{
    YYNEWLINE();
    das_yylval.ch = yytext[0];
    return STRING_CHARACTER;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 147 "ds_lexer.lpp"
{
    das_yylval.ch = yytext[0];
    return STRING_CHARACTER;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 151 "ds_lexer.lpp"
{
    // assert(nested_sb==0);
    BEGIN(normal);
    return END_STRING;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 156 "ds_lexer.lpp"
{
    DAS_ASSERT(das_nested_sb==0);
    das_nested_sb ++;
    BEGIN(normal);
    return BEGIN_STRING_EXPR;
}
	YY_BREAK
case YY_STATE_EOF(strb):
#line 162 "ds_lexer.lpp"
{
    das_yyfatalerror("string constant exceeds file", CompilationError::string_constant_exceeds_file);
    BEGIN(normal);
    return END_STRING;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 167 "ds_lexer.lpp"
{
    das_yylval.ch = yytext[1];
    return STRING_CHARACTER;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 171 "ds_lexer.lpp"
/* do exactly nothing */
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 172 "ds_lexer.lpp"
{
    das_yylval.ch = *yytext;
    YYNEWLINE();
    return STRING_CHARACTER;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 177 "ds_lexer.lpp"
{
    YYTAB();
    das_yylval.ch = *yytext;
    return STRING_CHARACTER;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 182 "ds_lexer.lpp"
{
    das_yylval.ch = *yytext;
    return STRING_CHARACTER;
}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 186 "ds_lexer.lpp"
/* skip empty line */ {
    das_current_line_indent = 0;
    YYNEWLINE();
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 190 "ds_lexer.lpp"
{
    das_current_line_indent++;
    #ifdef FLEX_DEBUG
        printf("[ ], indent=%i\n", das_current_line_indent);
    #endif
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 196 "ds_lexer.lpp"
{
    das_current_line_indent = (das_current_line_indent + das_tab_size) & ~(das_tab_size-1);
    #ifdef FLEX_DEBUG
        printf("\\t, cli=%i\n", das_current_line_indent);
    #endif
    YYTAB();
}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 203 "ds_lexer.lpp"
{
    das_current_line_indent = 0;
    das_need_oxford_comma = true;
    YYNEWLINE();
    #ifdef FLEX_DEBUG
        printf("new line\n");
    #endif
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 211 "ds_lexer.lpp"
{
    unput(*yytext);
    YYCOLUMN(das_yycolumn--, "UNPUT");
    if (das_current_line_indent > das_indent_level*das_tab_size ) {
        if ( das_current_line_indent % das_tab_size ) {
            #ifdef FLEX_DEBUG
            printf("INVALID INDENT at %i, emit {\n", das_current_line_indent);
            #endif
            das_yyfatalerror("invalid indentation"); // pretend tab was pressed
            das_current_line_indent = (das_current_line_indent + das_tab_size) & ~(das_tab_size-1);
        }
        das_indent_level++;
        #ifdef FLEX_DEBUG
        printf("emit {, cli=%i, indent =%i\n", das_current_line_indent, das_indent_level);
        #endif
        return '{';
    } else if (das_current_line_indent < das_indent_level*das_tab_size ) {
        das_indent_level--;
        #ifdef FLEX_DEBUG
        printf("emit }, cli=%i, indent =%i\n", das_current_line_indent, das_indent_level);
        #endif
        return '}';
    } else {
        BEGIN(normal);
    }
}
	YY_BREAK
case YY_STATE_EOF(indent):
#line 237 "ds_lexer.lpp"
{
    if ( g_FileAccessStack.size()==1 ) {
        if ( das_indent_level ) {
            das_indent_level--;
            unput('\r');
            #ifdef FLEX_DEBUG
            printf("emit }\n");
            #endif
            return '}';
        } else {
            return 0;
        }
    } else {
        yypop_buffer_state();
        g_FileAccessStack.pop_back();
        yylineno = das_line_no.back();
        das_line_no.pop_back();
    }
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 257 "ds_lexer.lpp"
/* eat the whitespace */
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 258 "ds_lexer.lpp"
{
    YYTAB();
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 261 "ds_lexer.lpp"
{ /* got the include file name */
    auto cfi = g_FileAccessStack.back();
    string incFileName = g_Access->getIncludeFileName(cfi->name,yytext);
    auto info = g_Access->getFileInfo(incFileName);
    if ( !info ) {
        das_yyfatalerror("can't open "+incFileName);
    } else {
        if ( das_already_include.find(incFileName) == das_already_include.end() ) {
            das_already_include.insert(incFileName);
            g_FileAccessStack.push_back(info);
            das_line_no.push_back(yylineno);
            yylineno = 1;
            yypush_buffer_state(YY_CURRENT_BUFFER);
            yy_scan_bytes(info->source, info->sourceLength);
        }
    }
    BEGIN(normal);
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 280 "ds_lexer.lpp"
BEGIN(include);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 281 "ds_lexer.lpp"
/* das_need_oxford_comma = false; */ return DAS_FOR;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 282 "ds_lexer.lpp"
das_need_oxford_comma = false; return DAS_WHILE;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 283 "ds_lexer.lpp"
das_need_oxford_comma = false; return DAS_IF;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 284 "ds_lexer.lpp"
das_need_oxford_comma = false; return DAS_STATIC_IF;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 285 "ds_lexer.lpp"
das_need_oxford_comma = false; return DAS_ELIF;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 286 "ds_lexer.lpp"
das_need_oxford_comma = false; return DAS_STATIC_ELIF;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 287 "ds_lexer.lpp"
das_need_oxford_comma = false; return DAS_ELSE;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 288 "ds_lexer.lpp"
das_need_oxford_comma = false; return DAS_FINALLY;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 289 "ds_lexer.lpp"
das_need_oxford_comma = false; return DAS_DEF;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 290 "ds_lexer.lpp"
das_need_oxford_comma = false; return DAS_WITH;
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 291 "ds_lexer.lpp"
das_need_oxford_comma = false; unput('\n'); return DAS_LET;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 292 "ds_lexer.lpp"
return DAS_LET;
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 293 "ds_lexer.lpp"
das_need_oxford_comma = false; unput('\n'); return DAS_VAR;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 294 "ds_lexer.lpp"
return DAS_VAR;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 295 "ds_lexer.lpp"
das_need_oxford_comma = false; return DAS_STRUCT;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 296 "ds_lexer.lpp"
das_need_oxford_comma = false; return DAS_CLASS;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 297 "ds_lexer.lpp"
das_need_oxford_comma = false; return DAS_ENUM;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 298 "ds_lexer.lpp"
das_need_oxford_comma = false; return DAS_TRY;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 299 "ds_lexer.lpp"
das_need_oxford_comma = false; return DAS_CATCH;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 300 "ds_lexer.lpp"
das_need_oxford_comma = false; return DAS_TYPEDEF;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 301 "ds_lexer.lpp"
return DAS_LABEL;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 302 "ds_lexer.lpp"
return DAS_GOTO;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 303 "ds_lexer.lpp"
return DAS_MODULE;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 304 "ds_lexer.lpp"
return DAS_PUBLIC;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 305 "ds_lexer.lpp"
return DAS_OPTIONS;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 306 "ds_lexer.lpp"
return DAS_OPERATOR;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 307 "ds_lexer.lpp"
return DAS_REQUIRE;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 308 "ds_lexer.lpp"
return DAS_TBLOCK;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 309 "ds_lexer.lpp"
return DAS_TFUNCTION;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 310 "ds_lexer.lpp"
return DAS_TLAMBDA;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 311 "ds_lexer.lpp"
return DAS_GENERATOR;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 312 "ds_lexer.lpp"
return DAS_TTUPLE;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 313 "ds_lexer.lpp"
return DAS_TVARIANT;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 314 "ds_lexer.lpp"
return DAS_CONST;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 315 "ds_lexer.lpp"
return DAS_CONTINUE;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 316 "ds_lexer.lpp"
return DAS_WHERE;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 317 "ds_lexer.lpp"
return DAS_CAST;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 318 "ds_lexer.lpp"
return DAS_UPCAST;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 319 "ds_lexer.lpp"
return DAS_PASS;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 320 "ds_lexer.lpp"
return DAS_REINTERPRET;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 321 "ds_lexer.lpp"
return DAS_OVERRIDE;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 322 "ds_lexer.lpp"
return DAS_ABSTRACT;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 323 "ds_lexer.lpp"
return DAS_EXPECT;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 324 "ds_lexer.lpp"
return DAS_TABLE;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 325 "ds_lexer.lpp"
return DAS_ARRAY;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 326 "ds_lexer.lpp"
return DAS_ITERATOR;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 327 "ds_lexer.lpp"
return DAS_IN;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 328 "ds_lexer.lpp"
return DAS_IMPLICIT;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 329 "ds_lexer.lpp"
return DAS_EXPLICIT;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 330 "ds_lexer.lpp"
return DAS_SHARED;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 331 "ds_lexer.lpp"
return DAS_SMART_PTR;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 332 "ds_lexer.lpp"
das_need_oxford_comma = false; return DAS_UNSAFE;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 333 "ds_lexer.lpp"
return DAS_AS;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 334 "ds_lexer.lpp"
return DAS_IS;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 335 "ds_lexer.lpp"
return DAS_DEREF;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 336 "ds_lexer.lpp"
return DAS_ADDR;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 337 "ds_lexer.lpp"
return DAS_SCOPE;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 338 "ds_lexer.lpp"
return DAS_NULL;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 339 "ds_lexer.lpp"
return DAS_RETURN;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 340 "ds_lexer.lpp"
return DAS_YIELD;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 341 "ds_lexer.lpp"
return DAS_BREAK;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 342 "ds_lexer.lpp"
return DAS_TYPEINFO;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 343 "ds_lexer.lpp"
return DAS_TYPE;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 344 "ds_lexer.lpp"
return DAS_NEWT;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 345 "ds_lexer.lpp"
return DAS_DELETE;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 346 "ds_lexer.lpp"
return DAS_TRUE;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 347 "ds_lexer.lpp"
return DAS_FALSE;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 348 "ds_lexer.lpp"
return DAS_TAUTO;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 349 "ds_lexer.lpp"
return DAS_TBOOL;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 350 "ds_lexer.lpp"
return DAS_TVOID;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 351 "ds_lexer.lpp"
return DAS_TSTRING;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 352 "ds_lexer.lpp"
return DAS_TRANGE;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 353 "ds_lexer.lpp"
return DAS_TURANGE;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 354 "ds_lexer.lpp"
return DAS_TINT;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 355 "ds_lexer.lpp"
return DAS_TINT8;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 356 "ds_lexer.lpp"
return DAS_TINT16;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 357 "ds_lexer.lpp"
return DAS_TINT64;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 358 "ds_lexer.lpp"
return DAS_TINT2;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 359 "ds_lexer.lpp"
return DAS_TINT3;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 360 "ds_lexer.lpp"
return DAS_TINT4;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 361 "ds_lexer.lpp"
return DAS_TUINT;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 362 "ds_lexer.lpp"
return DAS_TBITFIELD;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 363 "ds_lexer.lpp"
return DAS_TUINT8;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 364 "ds_lexer.lpp"
return DAS_TUINT16;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 365 "ds_lexer.lpp"
return DAS_TUINT64;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 366 "ds_lexer.lpp"
return DAS_TUINT2;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 367 "ds_lexer.lpp"
return DAS_TUINT3;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 368 "ds_lexer.lpp"
return DAS_TUINT4;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 369 "ds_lexer.lpp"
return DAS_TDOUBLE;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 370 "ds_lexer.lpp"
return DAS_TFLOAT;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 371 "ds_lexer.lpp"
return DAS_TFLOAT2;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 372 "ds_lexer.lpp"
return DAS_TFLOAT3;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 373 "ds_lexer.lpp"
return DAS_TFLOAT4;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 374 "ds_lexer.lpp"
das_yylval.s = new string(yytext);  return NAME;    // TODO: track allocations
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 375 "ds_lexer.lpp"
{
        BEGIN(strb);
        return BEGIN_STRING;
    }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 379 "ds_lexer.lpp"
das_yylval.i = 8; return INTEGER;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 380 "ds_lexer.lpp"
das_yylval.i = 9; return INTEGER;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 381 "ds_lexer.lpp"
das_yylval.i = 10; return INTEGER;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 382 "ds_lexer.lpp"
das_yylval.i = 12; return INTEGER;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 383 "ds_lexer.lpp"
das_yylval.i = 13; return INTEGER;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 384 "ds_lexer.lpp"
das_yylval.i = '\\'; return INTEGER;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 385 "ds_lexer.lpp"
das_yylval.i = int32_t(yytext[1]); return INTEGER;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 386 "ds_lexer.lpp"
return sscanf(yytext, "%" SCNu64, &das_yylval.ui64)!=1 ? LEXER_ERROR : UNSIGNED_LONG_INTEGER;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 387 "ds_lexer.lpp"
return sscanf(yytext, "%" SCNi64, &das_yylval.i64)!=1 ? LEXER_ERROR : LONG_INTEGER;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 388 "ds_lexer.lpp"
return sscanf(yytext, "%u",  &das_yylval.ui)!=1 ? LEXER_ERROR : UNSIGNED_INTEGER;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 389 "ds_lexer.lpp"
{
        int64_t int_const;
        if ( sscanf(yytext, "%" SCNi64,  &int_const)!=1 ) {
            return LEXER_ERROR;
        } else {
            if ( int_const<INT32_MIN || int_const>INT32_MAX ) {
                das_yyfatalerror("integer constant out of range", CompilationError::integer_constant_out_of_range);
            }
            das_yylval.i = int32_t(int_const);
            return INTEGER;
        }
    }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 402 "ds_lexer.lpp"
return sscanf(yytext, "%" SCNx64, &das_yylval.ui64)!=1 ? LEXER_ERROR : UNSIGNED_LONG_INTEGER;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 403 "ds_lexer.lpp"
return sscanf(yytext, "%" SCNx64, &das_yylval.ui64)!=1 ? LEXER_ERROR : UNSIGNED_LONG_INTEGER;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 405 "ds_lexer.lpp"
{
        uint64_t int_const;
        if ( sscanf(yytext, "%" SCNx64,  &int_const)!=1 ) {
            return LEXER_ERROR;
        } else {
            if ( int_const>UINT32_MAX ) {
                das_yyfatalerror("integer constant out of range", CompilationError::integer_constant_out_of_range);
            }
            das_yylval.ui = uint32_t(int_const);
            return UNSIGNED_INTEGER;
        }
    }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 418 "ds_lexer.lpp"
{
        uint64_t int_const;
        if ( sscanf(yytext, "%" SCNx64,  &int_const)!=1 ) {
            return LEXER_ERROR;
        } else {
            if ( int_const>UINT32_MAX ) {
                das_yyfatalerror("integer constant out of range", CompilationError::integer_constant_out_of_range);
            }
            das_yylval.ui = uint32_t(int_const);
            return UNSIGNED_INTEGER;
        }
    }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 431 "ds_lexer.lpp"
return sscanf(yytext, "%lf", &das_yylval.fd)!=1 ? LEXER_ERROR : FLOAT;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 432 "ds_lexer.lpp"
return sscanf(yytext, "%lf", &das_yylval.fd)!=1 ? LEXER_ERROR : FLOAT;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 433 "ds_lexer.lpp"
return sscanf(yytext, "%lf", &das_yylval.fd)!=1 ? LEXER_ERROR : FLOAT;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 434 "ds_lexer.lpp"
return sscanf(yytext, "%lf", &das_yylval.fd)!=1 ? LEXER_ERROR : FLOAT;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 436 "ds_lexer.lpp"
return sscanf(yytext, "%lf", &das_yylval.d)!=1 ? LEXER_ERROR : DOUBLE;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 437 "ds_lexer.lpp"
return sscanf(yytext, "%lf", &das_yylval.d)!=1 ? LEXER_ERROR : DOUBLE;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 438 "ds_lexer.lpp"
return sscanf(yytext, "%lf", &das_yylval.d)!=1 ? LEXER_ERROR : DOUBLE;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 439 "ds_lexer.lpp"
return sscanf(yytext, "%lf", &das_yylval.d)!=1 ? LEXER_ERROR : DOUBLE;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 440 "ds_lexer.lpp"
{
    if ( !das_nested_parentheses ) {
        das_yyfatalerror("mismatching parentheses", CompilationError::mismatching_parentheses);
        return LEXER_ERROR;
    }
    das_nested_parentheses --;
    return ')';
}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 448 "ds_lexer.lpp"
{
    das_nested_parentheses ++;
    return '(';
}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 452 "ds_lexer.lpp"
{
    if ( !das_nested_square_braces ) {
        das_yyfatalerror("mismatching square braces", CompilationError::mismatching_parentheses);
        return LEXER_ERROR;
    }
    das_nested_square_braces --;
    return ']';
}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 460 "ds_lexer.lpp"
{
    das_nested_square_braces ++;
    return '[';
}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 464 "ds_lexer.lpp"
{
    if ( das_nested_sb ) {
        das_nested_sb --;
        if ( !das_nested_sb ) {
            BEGIN(strb);
            return END_STRING_EXPR;
        } else {
            return '}';
        }
    } else {
        if ( !das_nested_curly_braces ) {
            das_yyfatalerror("mismatching curly braces", CompilationError::mismatching_curly_bracers);
            return LEXER_ERROR;
        }
        das_nested_curly_braces --;
        return '}';
    }
}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 482 "ds_lexer.lpp"
{
    if ( das_nested_sb ) {
        das_nested_sb ++;
    } else {
        das_nested_curly_braces ++;
    }
    return '{';
}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 490 "ds_lexer.lpp"
return COLCOL;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 491 "ds_lexer.lpp"
return RPIPE;
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 492 "ds_lexer.lpp"
das_need_oxford_comma = false; unput('\n'); return LBPIPE;
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 493 "ds_lexer.lpp"
das_need_oxford_comma = false; unput('\n'); return LBPIPE;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 494 "ds_lexer.lpp"
{
    unput('$');
    YYCOLUMN(das_yycolumn--, "UNPUT $");
    if ( das_nested_parentheses ) {
        return LPIPE;
    } else {
        das_need_oxford_comma = false;
        return LBPIPE;
    }
}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 504 "ds_lexer.lpp"
{
    unput('@');
    YYCOLUMN(das_yycolumn--, "UNPUT @");
    if ( das_nested_parentheses ) {
        return LPIPE;
    } else {
        das_need_oxford_comma = false;
        return LBPIPE;
    }
}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 514 "ds_lexer.lpp"
{
    unput('@');
    YYCOLUMN(das_yycolumn--, "UNPUT @");
    if ( das_nested_parentheses ) {
        return LAPIPE;
    } else {
        das_need_oxford_comma = false;
        return LAPIPE;
    }
}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 524 "ds_lexer.lpp"
return LPIPE;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 525 "ds_lexer.lpp"
return QQ;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 526 "ds_lexer.lpp"
{
    das_nested_square_braces ++;
    return QBRA;
}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 530 "ds_lexer.lpp"
return QDOT;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 531 "ds_lexer.lpp"
return CLONEEQU;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 532 "ds_lexer.lpp"
return RARROW;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 533 "ds_lexer.lpp"
return LARROW;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 534 "ds_lexer.lpp"
return ADDEQU;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 535 "ds_lexer.lpp"
return SUBEQU;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 536 "ds_lexer.lpp"
return DIVEQU;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 537 "ds_lexer.lpp"
return MULEQU;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 538 "ds_lexer.lpp"
return MODEQU;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 539 "ds_lexer.lpp"
return ANDEQU;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 540 "ds_lexer.lpp"
return OREQU;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 541 "ds_lexer.lpp"
return XOREQU;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 542 "ds_lexer.lpp"
return ADDADD;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 543 "ds_lexer.lpp"
return SUBSUB;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 544 "ds_lexer.lpp"
return LEEQU;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 545 "ds_lexer.lpp"
return GREQU;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 546 "ds_lexer.lpp"
return EQUEQU;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 547 "ds_lexer.lpp"
return NOTEQU;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 548 "ds_lexer.lpp"
{
    if ( das_arrow_depth ) {
        unput('>');
        unput('>');
        YYCOLUMN(das_yycolumn-=2, "UNPUT");
        return '>';
    } else {
        return ROTR;
    }
}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 558 "ds_lexer.lpp"
{
    if ( das_arrow_depth ) {
        unput('>');
        YYCOLUMN(das_yycolumn--, "UNPUT");
        return '>';
    } else {
        return SHR;
    }
}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 567 "ds_lexer.lpp"
return ROTL;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 568 "ds_lexer.lpp"
return SHL;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 569 "ds_lexer.lpp"
return SHREQU;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 570 "ds_lexer.lpp"
return SHLEQU;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 571 "ds_lexer.lpp"
return ROTREQU;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 572 "ds_lexer.lpp"
return ROTLEQU;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 573 "ds_lexer.lpp"
return MAPTO;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 574 "ds_lexer.lpp"
{
        das_nested_square_braces ++;
        das_nested_square_braces ++;
        return BRABRAB;
    }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 579 "ds_lexer.lpp"
{
        das_nested_square_braces ++;
        das_nested_curly_braces ++;
        return BRACBRB;
    }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 584 "ds_lexer.lpp"
{
        das_nested_curly_braces ++;
        das_nested_curly_braces ++;
        return CBRCBRB;
    }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 589 "ds_lexer.lpp"
/* skip white space */
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 590 "ds_lexer.lpp"
{
    YYTAB();
}
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 593 "ds_lexer.lpp"
{
    YYCOLUMN(das_yycolumn = 0, "NEW LINE");
    if  ( !das_nested_parentheses && !das_nested_curly_braces && !das_nested_square_braces ) {
        bool ns = ((das_current_line_indent!=0) && das_need_oxford_comma) || das_force_oxford_comma;
        #ifdef FLEX_DEBUG
        if ( das_force_oxford_comma ) printf ( "forcing oxford comma\n");
        #endif
        das_force_oxford_comma = false;
        das_current_line_indent = 0;
        das_need_oxford_comma = true;
        BEGIN(indent);
        if ( ns ) {
            #ifdef FLEX_DEBUG
            printf("emit ; at EOL\n");
            #endif
            return ';';
        }
    }
}
	YY_BREAK
case YY_STATE_EOF(normal):
#line 612 "ds_lexer.lpp"
{
    if ( g_FileAccessStack.size()==1 ) {
        YYCOLUMN(das_yycolumn = 0,"EOF");
        if  ( !das_nested_parentheses && !das_nested_curly_braces && !das_nested_square_braces ) {
            bool ns = (das_current_line_indent!=0) && das_need_oxford_comma;
            das_current_line_indent = 0;
            das_need_oxford_comma = true;
            BEGIN(indent);
            if ( ns ) {
                #ifdef FLEX_DEBUG
                printf("emit ; at EOF\n");
                #endif
                return ';';
            }
        } else {
            return 0;
        }
    } else {
        yypop_buffer_state();
        g_FileAccessStack.pop_back();
        yylineno = das_line_no.back();
        das_line_no.pop_back();
    }
}
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 636 "ds_lexer.lpp"
return *yytext;
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 638 "ds_lexer.lpp"
ECHO;
	YY_BREAK
#line 2894 "ds_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(include):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 574 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 574 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 573);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 638 "ds_lexer.lpp"


extern int das_yydebug;

void das_yybegin_reader ( void ) {
    BEGIN(reader);
}

void das_yyend_reader ( void ) {
    BEGIN(normal);
}

void das_yybegin(const char * str) {
    g_thisStructure = nullptr;
    das_module_alias.clear();
    das_already_include.clear();
    das_yydebug = 0;
    yylineno = 1;
    das_tab_size = das_def_tab_size;
    das_line_no.clear();
    YYCOLUMN(das_yycolumn = 0,"YYBEGIN");
    das_current_line_indent = 0;
    das_indent_level = 0;
    das_nested_parentheses = 0;
    das_nested_curly_braces = 0;
    das_nested_square_braces = 0;
    das_nested_sb = 0;
    das_need_oxford_comma = true;
    das_force_oxford_comma = false;
    das_c_style_depth = 0;
    das_arrow_depth = 0;
    BEGIN(normal);
    yy_scan_string(str);
}



