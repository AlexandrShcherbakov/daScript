%code requires {
    #include "platform.h"
    #include "ast.h"
    
    using namespace yzg;
    using namespace std;
    
    namespace yzg { extern ProgramPtr g_Program; }
    
    struct VariableDeclaration {
        VariableDeclaration ( const LineInfo & a, vector<string> * n, TypeDecl * t, Expression * i )
            : at(a), pNameList(n), pTypeDecl(t), pInit(i) {}
        ~VariableDeclaration () { delete pNameList; delete pTypeDecl; delete pInit; }
        LineInfo        at;
        vector<string>  *pNameList;
        TypeDecl        *pTypeDecl;
        Expression      *pInit;
    };
    
    ExprLooksLikeCall * parseFunctionArguments ( ExprLooksLikeCall * pCall, Expression * arguments );
    vector<ExpressionPtr> sequenceToList ( Expression * arguments );
    void deleteVariableDeclarationList ( vector<VariableDeclaration *> * list );
    
    LineInfo tokAt ( const struct YYLTYPE & li );
}

%{
    #include "debug_info.h"
    #include "compilation_errors.h"
    
    void yyerror (const std::string & error, yzg::CompilationError cerr = yzg::CompilationError::syntax_error);
    void yyerror (const std::string & error, const yzg::LineInfo & at, yzg::CompilationError cerr = yzg::CompilationError::unspecified);
    int yylex();
    void yybegin(const char * str);
%}

%locations
%verbose
%debug

%union {
    bool                            b;
    int                             i;
    uint                            ui;
    double                          d;
    string                          *s;
    vector<string>                  *pNameList;
    Structure                       *pStruct;
    VariableDeclaration             *pVarDecl;
    vector<VariableDeclaration*>    *pVarDeclList;
    TypeDecl                        *pTypeDecl;
    Expression                      *pExpression;
    Type                            type;
}

%token  LEXER_ERROR

/* keywords */
%token  _STRUCT _LET    _DEF        _WHILE
%token  _IF     _ELSE   _FOR        _CATCH
%token  _TRUE   _FALSE  _SIZEOF     _NEW
%token  _TYPE   _IN     _ELIF       _ARRAY
%token  _RETURN _NULL   _BREAK      _TRY
%token  _WHERE  _TABLE  _EXPECT     _CONST

/* basic types */
%token  _BOOL   _VOID   _STRING
%token  _INT    _INT2   _INT3   _INT4
%token  _UINT   _UINT2  _UINT3  _UINT4
%token  _FLOAT  _FLOAT2 _FLOAT3 _FLOAT4
%token  _RANGE  _URANGE

/* operators */
%token  ADDEQU      SUBEQU      DIVEQU      MULEQU      MODEQU
%token  SHLEQU      SHREQU      ANDEQU      OREQU       XOREQU
%token  SHL         SHR         ADDADD      SUBSUB      LEEQU
%token  GREQU       EQUEQU      NOTEQU      RARROW      LARROW
%token  QQ          QDOT

%token<i>   INTEGER
%token<ui>  UNSIGNED_INTEGER
%token<d>   DOUBLE
%token<s>   STRING
%token<s>   NAME

%type <pNameList>       variable_name_list
%type <type>            basic_type_declaration
%type <pTypeDecl>       type_declaration
%type <pTypeDecl>       optional_function_type
%type <pTypeDecl>       structure_type_declaration
%type <pVarDeclList>    variable_declaration_list
%type <pVarDeclList>    struct_variable_declaration_list
%type <pVarDeclList>    optional_function_argument_list
%type <pVarDeclList>    function_argument_list
%type <pVarDecl>        variable_declaration

%type <pExpression>     expr
%type <pExpression>     expr_list
%type <pExpression>     expression_let
%type <pExpression>     expressions
%type <pExpression>     expression_block
%type <pExpression>     expression_while_loop
%type <pExpression>     expression_for_loop
%type <pExpression>     expression_break
%type <pExpression>     expression_return
%type <pExpression>     expression_else
%type <pExpression>     expression_if_then_else
%type <pExpression>     expression_try_catch
%type <pExpression>     expr_new
%type <pExpression>     expr_sizeof
%type <pExpression>     expression_any
%type <pExpression>     optional_initializer

/* operation precedence*/
%left   ','
%right  '=' ADDEQU SUBEQU DIVEQU MULEQU MODEQU SHREQU SHLEQU ANDEQU OREQU XOREQU LARROW
%right  '?' ':'
%left   '|'
%left   '^'
%left   '&'
%left   EQUEQU NOTEQU
%left   '<' '>' LEEQU GREQU
%left   SHR SHL
%left   '-' '+'
%left   '*' '/' '%'
%left   QQ
%right  UNARY_MINUS UNARY_PLUS '~' '!' PRE_INC PRE_DEC ADDADD SUBSUB
%left   POST_INC POST_DEC '.' '[' ']' '(' ')' RARROW QDOT

%%

program
    :
    |   program structure_declaration
    |   program global_let
    |   program function_declaration
    |   program expect_declaration
    ;

expect_declaration
    :   _EXPECT expect_list
    ;

expect_list
    :   expect_error
    |   expect_list ',' expect_error
    ;

expect_error
    : INTEGER[err] {
        g_Program->expectErrors.push_back(CompilationError($err));
    }
    | INTEGER[err] ':' INTEGER[count] {
        for ( int cc=0; cc!=$count; ++cc ) {
            g_Program->expectErrors.push_back(CompilationError($err));
        }
    }
    ;

expression_else
    :                                                   { $$ = nullptr; }
    |   _ELSE expression_block[block]                   { $$ = $block; }
    |   _ELIF[loc] expr[cond] expression_block[block] expression_else[then] {
        $$ = new ExprIfThenElse(tokAt(@loc),ExpressionPtr($cond),ExpressionPtr($block),ExpressionPtr($then));
    }
    ;

expression_if_then_else
    :   _IF[loc] expr[cond] expression_block[block] expression_else[then] {
        $$ = new ExprIfThenElse(tokAt(@loc),ExpressionPtr($cond),ExpressionPtr($block),ExpressionPtr($then));
    }
    ;

expression_for_loop
    :   _FOR[loc] variable_name_list[iters] _IN expr_list[srcs] expression_block[block] {
        auto pFor = new ExprFor(tokAt(@loc));
        pFor->iterators = *$iters;
        delete $iters;
        pFor->sources = sequenceToList($srcs);
        pFor->subexpr = ExpressionPtr($block);
        $$ = pFor;
    }
    |   _FOR[loc] variable_name_list[iters] _IN expr_list[srcs] _WHERE expr[filter] expression_block[block] {
        auto pFor = new ExprFor(tokAt(@loc));
        pFor->iterators = *$iters;
        delete $iters;
        pFor->sources = sequenceToList($srcs);
        pFor->subexpr = ExpressionPtr($block);
        pFor->filter = ExpressionPtr($filter);
        $$ = pFor;
    }
    ;

expression_while_loop
    :   _WHILE expr[condition] expression_block[block] {
        auto pWhile = new ExprWhile();
        pWhile->cond = ExpressionPtr($condition);
        pWhile->body = ExpressionPtr($block);
        $$ = pWhile;
    }
    ;

optional_function_argument_list
    :                                           { $$ = nullptr; }
    |   '(' function_argument_list[list] ')'    { $$ = $list; }
    ;

optional_function_type
    :                                   { $$ = new TypeDecl(Type::tVoid); }
    |   ':' type_declaration[typeDecl]  { $$ = $typeDecl; $$->at = tokAt(@typeDecl); }
    ;

function_declaration
    :   _DEF[loc] NAME[name] optional_function_argument_list[list] optional_function_type[result] expression_block[block] {
        auto pFunction = make_shared<Function>();
        pFunction->name = *$name;
        pFunction->body = ExpressionPtr($block);
        pFunction->result = TypeDeclPtr($result);
        if ( pFunction->result->dim.size() )
            yyerror("function " + *$name + " can't return array",tokAt(@loc),CompilationError::invalid_return_type);
        else if ( pFunction->result->isRef())
            yyerror("function " + *$name + " can't return reference or boxed type",tokAt(@loc),CompilationError::invalid_return_type);
        if ( $list ) {
            for ( auto pDecl : *$list ) {
                if ( pDecl->pTypeDecl ) {
                    for ( const auto & name : *pDecl->pNameList ) {
                        if ( !pFunction->findArgument(name) ) {
                            VariablePtr pVar = make_shared<Variable>();
                            pVar->name = name;
                            pVar->at = pDecl->at;
                            pVar->type = make_shared<TypeDecl>(*pDecl->pTypeDecl);
                            if ( pVar->type->ref && pVar->type->isRefType() ) {
                                yyerror("can't pass boxed type by reference",pVar->at,CompilationError::invalid_argument_type);
                            }
                            pVar->init = ExpressionPtr(pDecl->pInit);
                            pFunction->arguments.push_back(pVar);
                        } else {
                            yyerror("function argument is already declared " + name,pDecl->at,CompilationError::argument_already_declared);
                        }
                    }
                }
            }
        }
        if ( !g_Program->addFunction(pFunction) )
            yyerror("function already defined " + pFunction->getMangledName(),tokAt(@loc),CompilationError::function_already_declared);
    }
    ;

expression_block
    :   '{' expressions[block] '}'      { $$ = $block; }
    ;

expression_any
    :   expr[subexpr] ';'                   { $$ = $subexpr; }
    |   expression_let[subexpr]             { $$ = $subexpr; }
    |   expression_while_loop[subexpr]      { $$ = $subexpr; }
    |   expression_for_loop[subexpr]        { $$ = $subexpr; }
    |   expression_break[subexpr]           { $$ = $subexpr; }
    |   expression_return[subexpr]          { $$ = $subexpr; }
    |   expression_if_then_else[subexpr]    { $$ = $subexpr; }
    |   expression_try_catch[subexpr]       { $$ = $subexpr; }
    ;

expressions
    :                                                   { $$ = new ExprBlock(); }
    |   expressions[block] expression_any[subexpr]      {
        $$ = $block;
        static_cast<ExprBlock*>($block)->list.push_back(ExpressionPtr($subexpr));
    }
    ;

expr_new
    :   _NEW[loc] NAME[structName]   {
            auto pTypeDecl = make_shared<TypeDecl>(Type::tStructure);
            pTypeDecl->structType = g_Program->findStructure(*$structName).get();
            if ( !pTypeDecl->structType )
                yyerror("structure type not found "+*$structName,tokAt(@loc),CompilationError::structure_not_found);
            $$ = new ExprNew(tokAt(@loc),pTypeDecl);
    }
    ;

expression_break
    :   _BREAK[loc] ';'  { $$ = new ExprBreak(tokAt(@loc)); }
    ;

expression_return
    :   _RETURN[loc] ';'                { $$ = new ExprReturn(tokAt(@loc),nullptr); }
    |   _RETURN[loc] expr[subexpr] ';'  { $$ = new ExprReturn(tokAt(@loc),ExpressionPtr($subexpr)); }
    ;

expression_try_catch
    :   _TRY[loc] expression_block[tryBlock] _CATCH expression_block[catchBlock] {
        $$ = new ExprTryCatch(tokAt(@loc),ExpressionPtr($tryBlock),ExpressionPtr($catchBlock));
    }
    ;

expression_let
    :   _LET '(' variable_declaration_list[list] ')' expression_block[subexpr] {
        auto pLet = new ExprLet();
        pLet->subexpr = ExpressionPtr($subexpr);
        for ( auto pDecl : *$list ) {
            if ( pDecl->pTypeDecl ) {
                for ( const auto & name : *pDecl->pNameList ) {
                    if ( !pLet->find(name) ) {
                        VariablePtr pVar = make_shared<Variable>();
                        pVar->name = name;
                        pVar->at = pDecl->at;
                        pVar->type = make_shared<TypeDecl>(*pDecl->pTypeDecl);
                        if ( pDecl->pInit )
                            pVar->init = pDecl->pInit->clone();
                        pLet->variables.push_back(pVar);
                    } else {
                        yyerror("local variable is already declared " + name,tokAt(@list),CompilationError::local_variable_already_declared);
                    }
                }
            }
        }
        deleteVariableDeclarationList($list);
        $$ = pLet;
    }
    ;

expr_sizeof
    :   _SIZEOF[loc] '(' expr[subexpr] ')'          { $$ = new ExprSizeOf(tokAt(@loc),ExpressionPtr($subexpr)); }
    |   _SIZEOF[loc] '(' _TYPE type_declaration[decl] ')' {
        if ( $decl->ref )
            yyerror("sizeof(type " + $decl->getMangledName() + "), sizing reference is prohibited",tokAt(@loc),CompilationError::sizeof_reference);
        $$ = new ExprConstInt(tokAt(@loc),$decl->getSizeOf());
        delete $decl;
    }
    ;

expr_list
    :   expr[subexpr]                       { $$ = $subexpr; }
    |   expr_list[left] ',' expr[right]     { $$ = new ExprSequence(tokAt(@left),ExpressionPtr($left),ExpressionPtr($right)); }
    ;

expr
    :   _NULL[loc]                            { $$ = new ExprConstPtr(tokAt(@loc),nullptr); }
    |   NAME[name]                            { $$ = new ExprVar(tokAt(@name),*$name); }
    |   INTEGER[const]                        { $$ = new ExprConstInt(tokAt(@const),(int32_t)$const); }
    |   UNSIGNED_INTEGER[const]               { $$ = new ExprConstUInt(tokAt(@const),(uint32_t)$const); }
    |   DOUBLE[const]                         { $$ = new ExprConstFloat(tokAt(@const),(float)$const); }
    |   STRING[const]                         { $$ = new ExprConstString(tokAt(@const),*$const); }
    |   _TRUE[loc]                            { $$ = new ExprConstBool(tokAt(@loc),true); }
    |   _FALSE[loc]                           { $$ = new ExprConstBool(tokAt(@loc),false); }
    |   '!'[loc] expr[subexpr]                { $$ = new ExprOp1(tokAt(@loc),Operator::boolNot,ExpressionPtr($subexpr)); }
    |   '~'[loc] expr[subexpr]                { $$ = new ExprOp1(tokAt(@loc),Operator::binNot,ExpressionPtr($subexpr)); }
    |   '+'[loc] expr[subexpr] %prec  UNARY_PLUS  { $$ = new ExprOp1(tokAt(@loc),Operator::add,ExpressionPtr($subexpr)); }
    |   '-'[loc] expr[subexpr] %prec  UNARY_MINUS { $$ = new ExprOp1(tokAt(@loc),Operator::sub,ExpressionPtr($subexpr)); }
    |   expr[left] LARROW[loc] expr[right]   { $$ = new ExprMove(tokAt(@loc),ExpressionPtr($left), ExpressionPtr($right)); }
    |   expr[left] '='[loc]    expr[right]   { $$ = new ExprCopy(tokAt(@loc),ExpressionPtr($left),ExpressionPtr($right)); }
    |   expr[left] ADDEQU[loc] expr[right]   { $$ = new ExprOp2(tokAt(@loc),Operator::addEqu, ExpressionPtr($left), ExpressionPtr($right)); }
    |   expr[left] SUBEQU[loc] expr[right]   { $$ = new ExprOp2(tokAt(@loc),Operator::subEqu, ExpressionPtr($left), ExpressionPtr($right)); }
    |   expr[left] MULEQU[loc] expr[right]   { $$ = new ExprOp2(tokAt(@loc),Operator::mulEqu, ExpressionPtr($left), ExpressionPtr($right)); }
    |   expr[left] DIVEQU[loc] expr[right]   { $$ = new ExprOp2(tokAt(@loc),Operator::divEqu, ExpressionPtr($left), ExpressionPtr($right)); }
    |   expr[left] MODEQU[loc] expr[right]   { $$ = new ExprOp2(tokAt(@loc),Operator::modEqu, ExpressionPtr($left), ExpressionPtr($right)); }
    |   expr[left] '+'[loc]    expr[right]   { $$ = new ExprOp2(tokAt(@loc),Operator::add, ExpressionPtr($left), ExpressionPtr($right)); }
    |   expr[left] '-'[loc]    expr[right]   { $$ = new ExprOp2(tokAt(@loc),Operator::sub, ExpressionPtr($left), ExpressionPtr($right)); }
    |   expr[left] '*'[loc]    expr[right]   { $$ = new ExprOp2(tokAt(@loc),Operator::mul, ExpressionPtr($left), ExpressionPtr($right)); }
    |   expr[left] '/'[loc]    expr[right]   { $$ = new ExprOp2(tokAt(@loc),Operator::div, ExpressionPtr($left), ExpressionPtr($right)); }
    |   expr[left] '%'[loc]    expr[right]   { $$ = new ExprOp2(tokAt(@loc),Operator::mod, ExpressionPtr($left), ExpressionPtr($right)); }
    |   expr[left] '<'[loc]    expr[right]   { $$ = new ExprOp2(tokAt(@loc),Operator::less, ExpressionPtr($left), ExpressionPtr($right)); }
    |   expr[left] '>'[loc]    expr[right]   { $$ = new ExprOp2(tokAt(@loc),Operator::greater, ExpressionPtr($left), ExpressionPtr($right)); }
    |   expr[left] EQUEQU[loc] expr[right]   { $$ = new ExprOp2(tokAt(@loc),Operator::eqEq, ExpressionPtr($left), ExpressionPtr($right)); }
    |   expr[left] NOTEQU[loc] expr[right]   { $$ = new ExprOp2(tokAt(@loc),Operator::notEqu, ExpressionPtr($left), ExpressionPtr($right)); }
    |   expr[left] LEEQU[loc]  expr[right]   { $$ = new ExprOp2(tokAt(@loc),Operator::lessEqu, ExpressionPtr($left), ExpressionPtr($right)); }
    |   expr[left] GREQU[loc]  expr[right]   { $$ = new ExprOp2(tokAt(@loc),Operator::greaterEqu, ExpressionPtr($left), ExpressionPtr($right)); }
    |   expr[left] '&'[loc] expr[right]      { $$ = new ExprOp2(tokAt(@loc),Operator::binand, ExpressionPtr($left), ExpressionPtr($right)); }
    |   expr[left] '|'[loc] expr[right]      { $$ = new ExprOp2(tokAt(@loc),Operator::binor, ExpressionPtr($left), ExpressionPtr($right)); }
    |   expr[left] '^'[loc] expr[right]      { $$ = new ExprOp2(tokAt(@loc),Operator::binxor, ExpressionPtr($left), ExpressionPtr($right)); }
    |   ADDADD[loc] expr[subexpr] %prec PRE_INC  { $$ = new ExprOp1(tokAt(@loc),Operator::inc, ExpressionPtr($subexpr)); }
    |   SUBSUB[loc] expr[subexpr] %prec PRE_DEC  { $$ = new ExprOp1(tokAt(@loc),Operator::dec, ExpressionPtr($subexpr)); }
    |   expr[subexpr] ADDADD[loc] %prec POST_INC { $$ = new ExprOp1(tokAt(@loc),Operator::postInc, ExpressionPtr($subexpr)); }
    |   expr[subexpr] SUBSUB[loc] %prec POST_DEC { $$ = new ExprOp1(tokAt(@loc),Operator::postDec, ExpressionPtr($subexpr)); }
    |   '(' expr[subexpr] ')'                    { $$ = $subexpr; }
    |   expr[subexpr] '['[loc] expr[index] ']'   { $$ = new ExprAt(tokAt(@loc), ExpressionPtr($subexpr), ExpressionPtr($index)); }
    |   expr[subexpr] '.'[loc] NAME[name]        { $$ = new ExprField(tokAt(@loc), ExpressionPtr($subexpr), *$name); }
    |   expr[subexpr] QDOT[loc] NAME[name]       { $$ = new ExprSafeField(tokAt(@loc), ExpressionPtr($subexpr), *$name); }
    |   NAME[name] '(' ')'                       { $$ = g_Program->makeCall(tokAt(@name),*$name); }
    |   NAME[name] '(' expr_list[arguments] ')'  { $$ = parseFunctionArguments(g_Program->makeCall(tokAt(@name),*$name),$arguments); }
    |   basic_type_declaration[type] '(' expr_list[arguments] ')' {
            $$ = parseFunctionArguments(g_Program->makeCall(tokAt(@type),to_string($type)),$arguments);
        }
    |   expr[subexpr] RARROW[loc]               { $$ = new ExprPtr2Ref(tokAt(@loc),ExpressionPtr($subexpr)); }
    |   expr[subexpr] QQ[loc] expr[dval]        { $$ = new ExprNullCoalescing(tokAt(@loc),ExpressionPtr($subexpr),ExpressionPtr($dval)); }
    |   expr_sizeof[subexpr]                    { $$ = $subexpr; }
    |   expr_new[subexpr]                       { $$ = $subexpr; }
    ;

struct_variable_declaration_list
    :                                                                            { $$ = new vector<VariableDeclaration*>(); }
    |   struct_variable_declaration_list[list] variable_declaration[decl] ';'    { $$ = $list; $list->push_back($decl); }
    ;

variable_declaration_list
    :   variable_declaration[decl]                                      { $$ = new vector<VariableDeclaration*>(); $$->push_back($decl); }
    |   variable_declaration_list[list] ';' variable_declaration[decl]  { $$ = $list; $list->push_back($decl); }
    ;

function_argument_list
    :   variable_declaration[decl]                                      { $$ = new vector<VariableDeclaration*>(); $$->push_back($decl); }
    |   function_argument_list[list] ';' variable_declaration[decl]     { $$ = $list; $list->push_back($decl); }
    ;

optional_initializer
    :                       { $$ = nullptr; }
    |  '=' expr[subexpr]    { $$ = $subexpr; }
    ;

variable_declaration
    :   variable_name_list[list] ':' type_declaration[typeDecl] optional_initializer[init] {
        $$ = new VariableDeclaration(tokAt(@list),$list,$typeDecl,$init);
    }
    ;

global_let
    :   _LET '{' struct_variable_declaration_list[list] '}' {
        for ( auto pDecl : *$list ) {
            if ( pDecl->pTypeDecl ) {
                for ( const auto & name : *pDecl->pNameList ) {
                    VariablePtr pVar = make_shared<Variable>();
                    pVar->name = name;
                    pVar->at = pDecl->at;
                    pVar->type = make_shared<TypeDecl>(*pDecl->pTypeDecl);
                    if ( pDecl->pInit )
                        pVar->init = pDecl->pInit->clone();
                    if ( !g_Program->addVariable(pVar) )
                        yyerror("global variable is already declared " + name,pDecl->at,CompilationError::global_variable_already_declared);
                }
            }
        }
        deleteVariableDeclarationList($list);
    }
    ;

structure_declaration
    : _STRUCT[loc] NAME[name] '{' struct_variable_declaration_list[list] '}' {
        auto pStruct = make_shared<Structure>(*$name);
        pStruct->at = tokAt(@loc);
        for ( auto pDecl : *$list ) {
            if ( pDecl->pTypeDecl->isVoid() ) {
                yyerror("structure type can't be void",tokAt(@loc),CompilationError::invalid_structure_field_type);
            } else if ( pDecl->pTypeDecl->ref ) {
                yyerror("structure type can't be reference or array of references",tokAt(@loc),CompilationError::invalid_structure_field_type);
            } else if ( pDecl->pInit ) {
                yyerror("structure field can't have initialization",tokAt(@loc),CompilationError::cant_initialize);
            } else {
                for ( const auto & name : *pDecl->pNameList ) {
                    if ( !pStruct->findField(name) ) {
                        auto td = make_shared<TypeDecl>(*pDecl->pTypeDecl);
                        pStruct->fields.push_back({name, td, pDecl->at});
                    } else {
                        yyerror("structure field is already declared "+name,pDecl->at,CompilationError::structure_field_already_declared);
                    }
                }
            }
        }
        if ( !g_Program->addStructure(pStruct) )
            yyerror("structure is alredy defined "+*$name,tokAt(@loc),CompilationError::structure_already_declared);
        deleteVariableDeclarationList($list);
    }
    ;

variable_name_list
    :   NAME[name]  {
        auto pSL = new vector<string>();
        pSL->push_back(*$name);
        $$ = pSL;
    }
    |   variable_name_list[list] ',' NAME[name] {
        $list->push_back(*$name);
        $$ = $list;
    }
    ;

basic_type_declaration
    :   _BOOL       { $$ = Type::tBool; }
    |   _STRING     { $$ = Type::tString; }
    |   _INT        { $$ = Type::tInt; }
    |   _INT2       { $$ = Type::tInt2; }
    |   _INT3       { $$ = Type::tInt3; }
    |   _INT4       { $$ = Type::tInt4; }
    |   _UINT       { $$ = Type::tUInt; }
    |   _UINT2      { $$ = Type::tUInt2; }
    |   _UINT3      { $$ = Type::tUInt3; }
    |   _UINT4      { $$ = Type::tUInt4; }
    |   _FLOAT      { $$ = Type::tFloat; }
    |   _FLOAT2     { $$ = Type::tFloat2; }
    |   _FLOAT3     { $$ = Type::tFloat3; }
    |   _FLOAT4     { $$ = Type::tFloat4; }
    |   _VOID       { $$ = Type::tVoid; }
    |   _RANGE      { $$ = Type::tRange; }
    |   _URANGE     { $$ = Type::tURange; }
    ;

structure_type_declaration
    :   NAME[name]  {
        if ( auto pS = g_Program->findStructure(*$name) ) {
            auto pTD = new TypeDecl(Type::tStructure);
            pTD->structType = pS.get();
            pTD->at = tokAt(@name);
            $$ = pTD;
        } else {
            yyerror("undefined type",tokAt(@name),CompilationError::type_not_found);
            $$ = nullptr;
            YYABORT;
        }
    }
    ;

type_declaration
    :   basic_type_declaration[basicType]                   { $$ = new TypeDecl($basicType); $$->at = tokAt(@basicType); }
    |   structure_type_declaration[typeDecl]                { $$ = $typeDecl; }
    |   _CONST type_declaration[typeDecl] {
        $typeDecl->constant = true;
        $$ = $typeDecl;
    }
    |   type_declaration[typeDecl] '[' INTEGER[dimSize] ']' {
        if ( $typeDecl->ref ) {
            yyerror("can't be array of references",tokAt(@dimSize),CompilationError::invalid_type);
        }
        $typeDecl->dim.push_back($dimSize);
        $$ = $typeDecl;
    }
    |   type_declaration[typeDecl] '&' {
        if ( $typeDecl->dim.size() ) {
            yyerror("can't be reference of array",tokAt(@typeDecl),CompilationError::invalid_type);
        }
        if ( $typeDecl->ref ) {
            yyerror("can't be reference of reference",tokAt(@typeDecl),CompilationError::invalid_type);
        }
        if ( $typeDecl->isVoid() ) {
            yyerror("can't be void reference",tokAt(@typeDecl),CompilationError::invalid_type);
        }
        $typeDecl->ref = true;
        $$ = $typeDecl;
    }
    |   type_declaration[typeDecl] '?' {
        if ( $typeDecl->ref ) {
            yyerror("can't be pointer to reference",tokAt(@typeDecl),CompilationError::invalid_type);
        }
        $$ = new TypeDecl(Type::tPointer);
        $$->firstType = TypeDeclPtr($typeDecl);
    }
    |   _ARRAY[loc] '<' type_declaration[typeDecl] '>' {
        if ( $typeDecl->ref ) {
            yyerror("can't have reference in the Array",tokAt(@typeDecl),CompilationError::invalid_array_type);
        } else if ( $typeDecl->isVoid() ) {
            yyerror("can't have void Array",tokAt(@typeDecl),CompilationError::invalid_array_type);
        }
        $$ = new TypeDecl(Type::tArray);
        $$->at = tokAt(@loc);
        $$->firstType = TypeDeclPtr($typeDecl);
    }
    |   _TABLE[loc] '<' type_declaration[keyTypeDecl] ',' type_declaration[valueTypeDecl] '>' {
        if ( $keyTypeDecl->ref || $valueTypeDecl->ref ) {
            yyerror("can't have reference in the Table",tokAt(@loc),CompilationError::invalid_table_type);
        }
        if ( $keyTypeDecl->isVoid() || $valueTypeDecl->isVoid() ) {
            yyerror("can't have void Table",tokAt(@loc),CompilationError::invalid_array_type);
        }
        if ( !$keyTypeDecl->isWorkhorseType() ) {
            yyerror("key has to be basic 'hashable' type",tokAt(@keyTypeDecl),CompilationError::invalid_table_type);
        }
        $$ = new TypeDecl(Type::tTable);
        $$->at = tokAt(@loc);
        $$->firstType = TypeDeclPtr($keyTypeDecl);
        $$->secondType = TypeDeclPtr($valueTypeDecl);
    }
    | '(' type_declaration[typeDecl] ')'    { $$ = $typeDecl; }
    ;

%%

void yyerror(const string & error, const LineInfo & at, CompilationError cerr) {
    g_Program->error(error,at,cerr);
}

void yyerror(const string & error, CompilationError cerr) {
    g_Program->error(error,LineInfo(yylloc.first_column,yylloc.first_line),cerr);
}

vector<ExpressionPtr> sequenceToList ( Expression * arguments ) {
    vector<ExpressionPtr> argList;
    auto arg = arguments;
    if ( arg->isSequence() ) {
        while ( arg->isSequence() ) {
            auto pSeq = static_cast<ExprSequence *>(arg);
            assert(!pSeq->right->isSequence());
            argList.push_back(pSeq->right);
            arg = pSeq->left.get();
        }
        argList.push_back(arg->shared_from_this());
        reverse(argList.begin(),argList.end());
        delete arguments;
    } else {
        argList.push_back(ExpressionPtr(arg));
    }
    return argList;
}

ExprLooksLikeCall * parseFunctionArguments ( ExprLooksLikeCall * pCall, Expression * arguments ) {
    pCall->arguments = sequenceToList(arguments);
    return pCall;
}

void deleteVariableDeclarationList ( vector<VariableDeclaration *> * list ) {
    for ( auto pD : *list )
        delete pD;
    delete list;
}

LineInfo tokAt ( const struct YYLTYPE & li ) {
    return LineInfo(li.first_column,li.first_line);
}
