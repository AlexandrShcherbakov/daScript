// this file is generated via daScript automatic C++ binder
// all user modifications will be lost after this file is re-generated

auto alias_CXIndex = typeFactory<void *>::make(lib);
alias_CXIndex->alias = "CXIndex";
addAlias(alias_CXIndex);

auto alias_CXTargetInfo = typeFactory<CXTargetInfoImpl *>::make(lib);
alias_CXTargetInfo->alias = "CXTargetInfo";
addAlias(alias_CXTargetInfo);

auto alias_CXTranslationUnit = typeFactory<CXTranslationUnitImpl *>::make(lib);
alias_CXTranslationUnit->alias = "CXTranslationUnit";
addAlias(alias_CXTranslationUnit);

auto alias_CXClientData = typeFactory<void *>::make(lib);
alias_CXClientData->alias = "CXClientData";
addAlias(alias_CXClientData);

auto alias_CXFile = typeFactory<void *>::make(lib);
alias_CXFile->alias = "CXFile";
addAlias(alias_CXFile);

auto alias_CXDiagnostic = typeFactory<void *>::make(lib);
alias_CXDiagnostic->alias = "CXDiagnostic";
addAlias(alias_CXDiagnostic);

auto alias_CXDiagnosticSet = typeFactory<void *>::make(lib);
alias_CXDiagnosticSet->alias = "CXDiagnosticSet";
addAlias(alias_CXDiagnosticSet);

auto alias_CXCursorSet = typeFactory<CXCursorSetImpl *>::make(lib);
alias_CXCursorSet->alias = "CXCursorSet";
addAlias(alias_CXCursorSet);

auto alias_CXCursorVisitor = typeFactory<CXChildVisitResult (*)(CXCursor, CXCursor, void *)>::make(lib);
alias_CXCursorVisitor->alias = "CXCursorVisitor";
addAlias(alias_CXCursorVisitor);

auto alias_CXPrintingPolicy = typeFactory<void *>::make(lib);
alias_CXPrintingPolicy->alias = "CXPrintingPolicy";
addAlias(alias_CXPrintingPolicy);

auto alias_CXModule = typeFactory<void *>::make(lib);
alias_CXModule->alias = "CXModule";
addAlias(alias_CXModule);

auto alias_CXCompletionString = typeFactory<void *>::make(lib);
alias_CXCompletionString->alias = "CXCompletionString";
addAlias(alias_CXCompletionString);

auto alias_CXInclusionVisitor = typeFactory<void (*)(void *, CXSourceLocation *, unsigned int, void *)>::make(lib);
alias_CXInclusionVisitor->alias = "CXInclusionVisitor";
addAlias(alias_CXInclusionVisitor);

auto alias_CXEvalResult = typeFactory<void *>::make(lib);
alias_CXEvalResult->alias = "CXEvalResult";
addAlias(alias_CXEvalResult);

auto alias_CXRemapping = typeFactory<void *>::make(lib);
alias_CXRemapping->alias = "CXRemapping";
addAlias(alias_CXRemapping);

auto alias_CXIdxClientFile = typeFactory<void *>::make(lib);
alias_CXIdxClientFile->alias = "CXIdxClientFile";
addAlias(alias_CXIdxClientFile);

auto alias_CXIdxClientEntity = typeFactory<void *>::make(lib);
alias_CXIdxClientEntity->alias = "CXIdxClientEntity";
addAlias(alias_CXIdxClientEntity);

auto alias_CXIdxClientContainer = typeFactory<void *>::make(lib);
alias_CXIdxClientContainer->alias = "CXIdxClientContainer";
addAlias(alias_CXIdxClientContainer);

auto alias_CXIdxClientASTFile = typeFactory<void *>::make(lib);
alias_CXIdxClientASTFile->alias = "CXIdxClientASTFile";
addAlias(alias_CXIdxClientASTFile);

auto alias_CXIndexAction = typeFactory<void *>::make(lib);
alias_CXIndexAction->alias = "CXIndexAction";
addAlias(alias_CXIndexAction);

auto alias_CXFieldVisitor = typeFactory<CXVisitorResult (*)(CXCursor, void *)>::make(lib);
alias_CXFieldVisitor->alias = "CXFieldVisitor";
addAlias(alias_CXFieldVisitor);

